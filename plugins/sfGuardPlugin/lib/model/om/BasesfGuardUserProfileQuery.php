<?php


/**
 * Base class that represents a query for the 'sf_guard_user_profile' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 05:18:54 2015
 *
 * @method sfGuardUserProfileQuery orderById($order = Criteria::ASC) Order by the id column
 * @method sfGuardUserProfileQuery orderByUserId($order = Criteria::ASC) Order by the user_id column
 * @method sfGuardUserProfileQuery orderByFirstName($order = Criteria::ASC) Order by the first_name column
 * @method sfGuardUserProfileQuery orderByLastName($order = Criteria::ASC) Order by the last_name column
 * @method sfGuardUserProfileQuery orderByPhoto($order = Criteria::ASC) Order by the photo column
 * @method sfGuardUserProfileQuery orderByBirthday($order = Criteria::ASC) Order by the birthday column
 * @method sfGuardUserProfileQuery orderByGender($order = Criteria::ASC) Order by the gender column
 * @method sfGuardUserProfileQuery orderByStatus($order = Criteria::ASC) Order by the status column
 * @method sfGuardUserProfileQuery orderByLookingfor($order = Criteria::ASC) Order by the lookingfor column
 * @method sfGuardUserProfileQuery orderByCity($order = Criteria::ASC) Order by the city column
 * @method sfGuardUserProfileQuery orderByState($order = Criteria::ASC) Order by the state column
 * @method sfGuardUserProfileQuery orderByZip($order = Criteria::ASC) Order by the zip column
 * @method sfGuardUserProfileQuery orderByCountryId($order = Criteria::ASC) Order by the country_id column
 * @method sfGuardUserProfileQuery orderByWebsite($order = Criteria::ASC) Order by the website column
 * @method sfGuardUserProfileQuery orderByActivities($order = Criteria::ASC) Order by the activities column
 * @method sfGuardUserProfileQuery orderByBooks($order = Criteria::ASC) Order by the books column
 * @method sfGuardUserProfileQuery orderByMusic($order = Criteria::ASC) Order by the music column
 * @method sfGuardUserProfileQuery orderByMovies($order = Criteria::ASC) Order by the movies column
 * @method sfGuardUserProfileQuery orderByTvshows($order = Criteria::ASC) Order by the tvshows column
 * @method sfGuardUserProfileQuery orderByAboutme($order = Criteria::ASC) Order by the aboutme column
 * @method sfGuardUserProfileQuery orderByValidate($order = Criteria::ASC) Order by the validate column
 * @method sfGuardUserProfileQuery orderByVisibility($order = Criteria::ASC) Order by the visibility column
 *
 * @method sfGuardUserProfileQuery groupById() Group by the id column
 * @method sfGuardUserProfileQuery groupByUserId() Group by the user_id column
 * @method sfGuardUserProfileQuery groupByFirstName() Group by the first_name column
 * @method sfGuardUserProfileQuery groupByLastName() Group by the last_name column
 * @method sfGuardUserProfileQuery groupByPhoto() Group by the photo column
 * @method sfGuardUserProfileQuery groupByBirthday() Group by the birthday column
 * @method sfGuardUserProfileQuery groupByGender() Group by the gender column
 * @method sfGuardUserProfileQuery groupByStatus() Group by the status column
 * @method sfGuardUserProfileQuery groupByLookingfor() Group by the lookingfor column
 * @method sfGuardUserProfileQuery groupByCity() Group by the city column
 * @method sfGuardUserProfileQuery groupByState() Group by the state column
 * @method sfGuardUserProfileQuery groupByZip() Group by the zip column
 * @method sfGuardUserProfileQuery groupByCountryId() Group by the country_id column
 * @method sfGuardUserProfileQuery groupByWebsite() Group by the website column
 * @method sfGuardUserProfileQuery groupByActivities() Group by the activities column
 * @method sfGuardUserProfileQuery groupByBooks() Group by the books column
 * @method sfGuardUserProfileQuery groupByMusic() Group by the music column
 * @method sfGuardUserProfileQuery groupByMovies() Group by the movies column
 * @method sfGuardUserProfileQuery groupByTvshows() Group by the tvshows column
 * @method sfGuardUserProfileQuery groupByAboutme() Group by the aboutme column
 * @method sfGuardUserProfileQuery groupByValidate() Group by the validate column
 * @method sfGuardUserProfileQuery groupByVisibility() Group by the visibility column
 *
 * @method sfGuardUserProfileQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method sfGuardUserProfileQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method sfGuardUserProfileQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method sfGuardUserProfileQuery leftJoinsfGuardUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfGuardUser relation
 * @method sfGuardUserProfileQuery rightJoinsfGuardUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfGuardUser relation
 * @method sfGuardUserProfileQuery innerJoinsfGuardUser($relationAlias = null) Adds a INNER JOIN clause to the query using the sfGuardUser relation
 *
 * @method sfGuardUserProfileQuery leftJoinCountry($relationAlias = null) Adds a LEFT JOIN clause to the query using the Country relation
 * @method sfGuardUserProfileQuery rightJoinCountry($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Country relation
 * @method sfGuardUserProfileQuery innerJoinCountry($relationAlias = null) Adds a INNER JOIN clause to the query using the Country relation
 *
 * @method sfGuardUserProfile findOne(PropelPDO $con = null) Return the first sfGuardUserProfile matching the query
 * @method sfGuardUserProfile findOneOrCreate(PropelPDO $con = null) Return the first sfGuardUserProfile matching the query, or a new sfGuardUserProfile object populated from the query conditions when no match is found
 *
 * @method sfGuardUserProfile findOneById(int $id) Return the first sfGuardUserProfile filtered by the id column
 * @method sfGuardUserProfile findOneByUserId(int $user_id) Return the first sfGuardUserProfile filtered by the user_id column
 * @method sfGuardUserProfile findOneByFirstName(string $first_name) Return the first sfGuardUserProfile filtered by the first_name column
 * @method sfGuardUserProfile findOneByLastName(string $last_name) Return the first sfGuardUserProfile filtered by the last_name column
 * @method sfGuardUserProfile findOneByPhoto(string $photo) Return the first sfGuardUserProfile filtered by the photo column
 * @method sfGuardUserProfile findOneByBirthday(string $birthday) Return the first sfGuardUserProfile filtered by the birthday column
 * @method sfGuardUserProfile findOneByGender(int $gender) Return the first sfGuardUserProfile filtered by the gender column
 * @method sfGuardUserProfile findOneByStatus(int $status) Return the first sfGuardUserProfile filtered by the status column
 * @method sfGuardUserProfile findOneByLookingfor(string $lookingfor) Return the first sfGuardUserProfile filtered by the lookingfor column
 * @method sfGuardUserProfile findOneByCity(string $city) Return the first sfGuardUserProfile filtered by the city column
 * @method sfGuardUserProfile findOneByState(string $state) Return the first sfGuardUserProfile filtered by the state column
 * @method sfGuardUserProfile findOneByZip(string $zip) Return the first sfGuardUserProfile filtered by the zip column
 * @method sfGuardUserProfile findOneByCountryId(int $country_id) Return the first sfGuardUserProfile filtered by the country_id column
 * @method sfGuardUserProfile findOneByWebsite(string $website) Return the first sfGuardUserProfile filtered by the website column
 * @method sfGuardUserProfile findOneByActivities(string $activities) Return the first sfGuardUserProfile filtered by the activities column
 * @method sfGuardUserProfile findOneByBooks(string $books) Return the first sfGuardUserProfile filtered by the books column
 * @method sfGuardUserProfile findOneByMusic(string $music) Return the first sfGuardUserProfile filtered by the music column
 * @method sfGuardUserProfile findOneByMovies(string $movies) Return the first sfGuardUserProfile filtered by the movies column
 * @method sfGuardUserProfile findOneByTvshows(string $tvshows) Return the first sfGuardUserProfile filtered by the tvshows column
 * @method sfGuardUserProfile findOneByAboutme(string $aboutme) Return the first sfGuardUserProfile filtered by the aboutme column
 * @method sfGuardUserProfile findOneByValidate(string $validate) Return the first sfGuardUserProfile filtered by the validate column
 * @method sfGuardUserProfile findOneByVisibility(int $visibility) Return the first sfGuardUserProfile filtered by the visibility column
 *
 * @method array findById(int $id) Return sfGuardUserProfile objects filtered by the id column
 * @method array findByUserId(int $user_id) Return sfGuardUserProfile objects filtered by the user_id column
 * @method array findByFirstName(string $first_name) Return sfGuardUserProfile objects filtered by the first_name column
 * @method array findByLastName(string $last_name) Return sfGuardUserProfile objects filtered by the last_name column
 * @method array findByPhoto(string $photo) Return sfGuardUserProfile objects filtered by the photo column
 * @method array findByBirthday(string $birthday) Return sfGuardUserProfile objects filtered by the birthday column
 * @method array findByGender(int $gender) Return sfGuardUserProfile objects filtered by the gender column
 * @method array findByStatus(int $status) Return sfGuardUserProfile objects filtered by the status column
 * @method array findByLookingfor(string $lookingfor) Return sfGuardUserProfile objects filtered by the lookingfor column
 * @method array findByCity(string $city) Return sfGuardUserProfile objects filtered by the city column
 * @method array findByState(string $state) Return sfGuardUserProfile objects filtered by the state column
 * @method array findByZip(string $zip) Return sfGuardUserProfile objects filtered by the zip column
 * @method array findByCountryId(int $country_id) Return sfGuardUserProfile objects filtered by the country_id column
 * @method array findByWebsite(string $website) Return sfGuardUserProfile objects filtered by the website column
 * @method array findByActivities(string $activities) Return sfGuardUserProfile objects filtered by the activities column
 * @method array findByBooks(string $books) Return sfGuardUserProfile objects filtered by the books column
 * @method array findByMusic(string $music) Return sfGuardUserProfile objects filtered by the music column
 * @method array findByMovies(string $movies) Return sfGuardUserProfile objects filtered by the movies column
 * @method array findByTvshows(string $tvshows) Return sfGuardUserProfile objects filtered by the tvshows column
 * @method array findByAboutme(string $aboutme) Return sfGuardUserProfile objects filtered by the aboutme column
 * @method array findByValidate(string $validate) Return sfGuardUserProfile objects filtered by the validate column
 * @method array findByVisibility(int $visibility) Return sfGuardUserProfile objects filtered by the visibility column
 *
 * @package    propel.generator.plugins.sfGuardPlugin.lib.model.om
 */
abstract class BasesfGuardUserProfileQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BasesfGuardUserProfileQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'sfGuardUserProfile', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new sfGuardUserProfileQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     sfGuardUserProfileQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return sfGuardUserProfileQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof sfGuardUserProfileQuery) {
            return $criteria;
        }
        $query = new sfGuardUserProfileQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   sfGuardUserProfile|sfGuardUserProfile[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = sfGuardUserProfilePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(sfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   sfGuardUserProfile A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `USER_ID`, `FIRST_NAME`, `LAST_NAME`, `PHOTO`, `BIRTHDAY`, `GENDER`, `STATUS`, `LOOKINGFOR`, `CITY`, `STATE`, `ZIP`, `COUNTRY_ID`, `WEBSITE`, `ACTIVITIES`, `BOOKS`, `MUSIC`, `MOVIES`, `TVSHOWS`, `ABOUTME`, `VALIDATE`, `VISIBILITY` FROM `sf_guard_user_profile` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new sfGuardUserProfile();
            $obj->hydrate($row);
            sfGuardUserProfilePeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return sfGuardUserProfile|sfGuardUserProfile[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|sfGuardUserProfile[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(sfGuardUserProfilePeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(sfGuardUserProfilePeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the user_id column
     *
     * Example usage:
     * <code>
     * $query->filterByUserId(1234); // WHERE user_id = 1234
     * $query->filterByUserId(array(12, 34)); // WHERE user_id IN (12, 34)
     * $query->filterByUserId(array('min' => 12)); // WHERE user_id > 12
     * </code>
     *
     * @see       filterBysfGuardUser()
     *
     * @param     mixed $userId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByUserId($userId = null, $comparison = null)
    {
        if (is_array($userId)) {
            $useMinMax = false;
            if (isset($userId['min'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $userId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($userId['max'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $userId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $userId, $comparison);
    }

    /**
     * Filter the query on the first_name column
     *
     * Example usage:
     * <code>
     * $query->filterByFirstName('fooValue');   // WHERE first_name = 'fooValue'
     * $query->filterByFirstName('%fooValue%'); // WHERE first_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $firstName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByFirstName($firstName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($firstName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $firstName)) {
                $firstName = str_replace('*', '%', $firstName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::FIRST_NAME, $firstName, $comparison);
    }

    /**
     * Filter the query on the last_name column
     *
     * Example usage:
     * <code>
     * $query->filterByLastName('fooValue');   // WHERE last_name = 'fooValue'
     * $query->filterByLastName('%fooValue%'); // WHERE last_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $lastName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByLastName($lastName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($lastName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $lastName)) {
                $lastName = str_replace('*', '%', $lastName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::LAST_NAME, $lastName, $comparison);
    }

    /**
     * Filter the query on the photo column
     *
     * Example usage:
     * <code>
     * $query->filterByPhoto('fooValue');   // WHERE photo = 'fooValue'
     * $query->filterByPhoto('%fooValue%'); // WHERE photo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $photo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByPhoto($photo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($photo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $photo)) {
                $photo = str_replace('*', '%', $photo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::PHOTO, $photo, $comparison);
    }

    /**
     * Filter the query on the birthday column
     *
     * Example usage:
     * <code>
     * $query->filterByBirthday('2011-03-14'); // WHERE birthday = '2011-03-14'
     * $query->filterByBirthday('now'); // WHERE birthday = '2011-03-14'
     * $query->filterByBirthday(array('max' => 'yesterday')); // WHERE birthday > '2011-03-13'
     * </code>
     *
     * @param     mixed $birthday The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByBirthday($birthday = null, $comparison = null)
    {
        if (is_array($birthday)) {
            $useMinMax = false;
            if (isset($birthday['min'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::BIRTHDAY, $birthday['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($birthday['max'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::BIRTHDAY, $birthday['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::BIRTHDAY, $birthday, $comparison);
    }

    /**
     * Filter the query on the gender column
     *
     * Example usage:
     * <code>
     * $query->filterByGender(1234); // WHERE gender = 1234
     * $query->filterByGender(array(12, 34)); // WHERE gender IN (12, 34)
     * $query->filterByGender(array('min' => 12)); // WHERE gender > 12
     * </code>
     *
     * @param     mixed $gender The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByGender($gender = null, $comparison = null)
    {
        if (is_array($gender)) {
            $useMinMax = false;
            if (isset($gender['min'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::GENDER, $gender['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($gender['max'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::GENDER, $gender['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::GENDER, $gender, $comparison);
    }

    /**
     * Filter the query on the status column
     *
     * Example usage:
     * <code>
     * $query->filterByStatus(1234); // WHERE status = 1234
     * $query->filterByStatus(array(12, 34)); // WHERE status IN (12, 34)
     * $query->filterByStatus(array('min' => 12)); // WHERE status > 12
     * </code>
     *
     * @param     mixed $status The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByStatus($status = null, $comparison = null)
    {
        if (is_array($status)) {
            $useMinMax = false;
            if (isset($status['min'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::STATUS, $status['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($status['max'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::STATUS, $status['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::STATUS, $status, $comparison);
    }

    /**
     * Filter the query on the lookingfor column
     *
     * Example usage:
     * <code>
     * $query->filterByLookingfor('fooValue');   // WHERE lookingfor = 'fooValue'
     * $query->filterByLookingfor('%fooValue%'); // WHERE lookingfor LIKE '%fooValue%'
     * </code>
     *
     * @param     string $lookingfor The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByLookingfor($lookingfor = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($lookingfor)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $lookingfor)) {
                $lookingfor = str_replace('*', '%', $lookingfor);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::LOOKINGFOR, $lookingfor, $comparison);
    }

    /**
     * Filter the query on the city column
     *
     * Example usage:
     * <code>
     * $query->filterByCity('fooValue');   // WHERE city = 'fooValue'
     * $query->filterByCity('%fooValue%'); // WHERE city LIKE '%fooValue%'
     * </code>
     *
     * @param     string $city The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByCity($city = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($city)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $city)) {
                $city = str_replace('*', '%', $city);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::CITY, $city, $comparison);
    }

    /**
     * Filter the query on the state column
     *
     * Example usage:
     * <code>
     * $query->filterByState('fooValue');   // WHERE state = 'fooValue'
     * $query->filterByState('%fooValue%'); // WHERE state LIKE '%fooValue%'
     * </code>
     *
     * @param     string $state The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByState($state = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($state)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $state)) {
                $state = str_replace('*', '%', $state);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::STATE, $state, $comparison);
    }

    /**
     * Filter the query on the zip column
     *
     * Example usage:
     * <code>
     * $query->filterByZip('fooValue');   // WHERE zip = 'fooValue'
     * $query->filterByZip('%fooValue%'); // WHERE zip LIKE '%fooValue%'
     * </code>
     *
     * @param     string $zip The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByZip($zip = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($zip)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $zip)) {
                $zip = str_replace('*', '%', $zip);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::ZIP, $zip, $comparison);
    }

    /**
     * Filter the query on the country_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCountryId(1234); // WHERE country_id = 1234
     * $query->filterByCountryId(array(12, 34)); // WHERE country_id IN (12, 34)
     * $query->filterByCountryId(array('min' => 12)); // WHERE country_id > 12
     * </code>
     *
     * @see       filterByCountry()
     *
     * @param     mixed $countryId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByCountryId($countryId = null, $comparison = null)
    {
        if (is_array($countryId)) {
            $useMinMax = false;
            if (isset($countryId['min'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::COUNTRY_ID, $countryId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($countryId['max'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::COUNTRY_ID, $countryId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::COUNTRY_ID, $countryId, $comparison);
    }

    /**
     * Filter the query on the website column
     *
     * Example usage:
     * <code>
     * $query->filterByWebsite('fooValue');   // WHERE website = 'fooValue'
     * $query->filterByWebsite('%fooValue%'); // WHERE website LIKE '%fooValue%'
     * </code>
     *
     * @param     string $website The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByWebsite($website = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($website)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $website)) {
                $website = str_replace('*', '%', $website);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::WEBSITE, $website, $comparison);
    }

    /**
     * Filter the query on the activities column
     *
     * Example usage:
     * <code>
     * $query->filterByActivities('fooValue');   // WHERE activities = 'fooValue'
     * $query->filterByActivities('%fooValue%'); // WHERE activities LIKE '%fooValue%'
     * </code>
     *
     * @param     string $activities The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByActivities($activities = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($activities)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $activities)) {
                $activities = str_replace('*', '%', $activities);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::ACTIVITIES, $activities, $comparison);
    }

    /**
     * Filter the query on the books column
     *
     * Example usage:
     * <code>
     * $query->filterByBooks('fooValue');   // WHERE books = 'fooValue'
     * $query->filterByBooks('%fooValue%'); // WHERE books LIKE '%fooValue%'
     * </code>
     *
     * @param     string $books The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByBooks($books = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($books)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $books)) {
                $books = str_replace('*', '%', $books);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::BOOKS, $books, $comparison);
    }

    /**
     * Filter the query on the music column
     *
     * Example usage:
     * <code>
     * $query->filterByMusic('fooValue');   // WHERE music = 'fooValue'
     * $query->filterByMusic('%fooValue%'); // WHERE music LIKE '%fooValue%'
     * </code>
     *
     * @param     string $music The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByMusic($music = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($music)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $music)) {
                $music = str_replace('*', '%', $music);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::MUSIC, $music, $comparison);
    }

    /**
     * Filter the query on the movies column
     *
     * Example usage:
     * <code>
     * $query->filterByMovies('fooValue');   // WHERE movies = 'fooValue'
     * $query->filterByMovies('%fooValue%'); // WHERE movies LIKE '%fooValue%'
     * </code>
     *
     * @param     string $movies The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByMovies($movies = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($movies)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $movies)) {
                $movies = str_replace('*', '%', $movies);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::MOVIES, $movies, $comparison);
    }

    /**
     * Filter the query on the tvshows column
     *
     * Example usage:
     * <code>
     * $query->filterByTvshows('fooValue');   // WHERE tvshows = 'fooValue'
     * $query->filterByTvshows('%fooValue%'); // WHERE tvshows LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tvshows The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByTvshows($tvshows = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tvshows)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tvshows)) {
                $tvshows = str_replace('*', '%', $tvshows);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::TVSHOWS, $tvshows, $comparison);
    }

    /**
     * Filter the query on the aboutme column
     *
     * Example usage:
     * <code>
     * $query->filterByAboutme('fooValue');   // WHERE aboutme = 'fooValue'
     * $query->filterByAboutme('%fooValue%'); // WHERE aboutme LIKE '%fooValue%'
     * </code>
     *
     * @param     string $aboutme The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByAboutme($aboutme = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($aboutme)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $aboutme)) {
                $aboutme = str_replace('*', '%', $aboutme);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::ABOUTME, $aboutme, $comparison);
    }

    /**
     * Filter the query on the validate column
     *
     * Example usage:
     * <code>
     * $query->filterByValidate('fooValue');   // WHERE validate = 'fooValue'
     * $query->filterByValidate('%fooValue%'); // WHERE validate LIKE '%fooValue%'
     * </code>
     *
     * @param     string $validate The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByValidate($validate = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($validate)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $validate)) {
                $validate = str_replace('*', '%', $validate);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::VALIDATE, $validate, $comparison);
    }

    /**
     * Filter the query on the visibility column
     *
     * Example usage:
     * <code>
     * $query->filterByVisibility(1234); // WHERE visibility = 1234
     * $query->filterByVisibility(array(12, 34)); // WHERE visibility IN (12, 34)
     * $query->filterByVisibility(array('min' => 12)); // WHERE visibility > 12
     * </code>
     *
     * @param     mixed $visibility The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function filterByVisibility($visibility = null, $comparison = null)
    {
        if (is_array($visibility)) {
            $useMinMax = false;
            if (isset($visibility['min'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::VISIBILITY, $visibility['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($visibility['max'])) {
                $this->addUsingAlias(sfGuardUserProfilePeer::VISIBILITY, $visibility['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(sfGuardUserProfilePeer::VISIBILITY, $visibility, $comparison);
    }

    /**
     * Filter the query by a related sfGuardUser object
     *
     * @param   sfGuardUser|PropelObjectCollection $sfGuardUser The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   sfGuardUserProfileQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBysfGuardUser($sfGuardUser, $comparison = null)
    {
        if ($sfGuardUser instanceof sfGuardUser) {
            return $this
                ->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $sfGuardUser->getId(), $comparison);
        } elseif ($sfGuardUser instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(sfGuardUserProfilePeer::USER_ID, $sfGuardUser->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBysfGuardUser() only accepts arguments of type sfGuardUser or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the sfGuardUser relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function joinsfGuardUser($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('sfGuardUser');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'sfGuardUser');
        }

        return $this;
    }

    /**
     * Use the sfGuardUser relation sfGuardUser object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   sfGuardUserQuery A secondary query class using the current class as primary query
     */
    public function usesfGuardUserQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinsfGuardUser($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'sfGuardUser', 'sfGuardUserQuery');
    }

    /**
     * Filter the query by a related Country object
     *
     * @param   Country|PropelObjectCollection $country The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   sfGuardUserProfileQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByCountry($country, $comparison = null)
    {
        if ($country instanceof Country) {
            return $this
                ->addUsingAlias(sfGuardUserProfilePeer::COUNTRY_ID, $country->getId(), $comparison);
        } elseif ($country instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(sfGuardUserProfilePeer::COUNTRY_ID, $country->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByCountry() only accepts arguments of type Country or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Country relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function joinCountry($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Country');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Country');
        }

        return $this;
    }

    /**
     * Use the Country relation Country object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   CountryQuery A secondary query class using the current class as primary query
     */
    public function useCountryQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinCountry($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Country', 'CountryQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   sfGuardUserProfile $sfGuardUserProfile Object to remove from the list of results
     *
     * @return sfGuardUserProfileQuery The current query, for fluid interface
     */
    public function prune($sfGuardUserProfile = null)
    {
        if ($sfGuardUserProfile) {
            $this->addUsingAlias(sfGuardUserProfilePeer::ID, $sfGuardUserProfile->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
