<?php


/**
 * Base class that represents a row from the 'sf_guard_user_profile' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 05:18:54 2015
 *
 * @package    propel.generator.plugins.sfGuardPlugin.lib.model.om
 */
abstract class BasesfGuardUserProfile extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'sfGuardUserProfilePeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        sfGuardUserProfilePeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the user_id field.
     * @var        int
     */
    protected $user_id;

    /**
     * The value for the first_name field.
     * @var        string
     */
    protected $first_name;

    /**
     * The value for the last_name field.
     * @var        string
     */
    protected $last_name;

    /**
     * The value for the photo field.
     * @var        string
     */
    protected $photo;

    /**
     * The value for the birthday field.
     * @var        string
     */
    protected $birthday;

    /**
     * The value for the gender field.
     * @var        int
     */
    protected $gender;

    /**
     * The value for the status field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $status;

    /**
     * The value for the lookingfor field.
     * @var        string
     */
    protected $lookingfor;

    /**
     * The value for the city field.
     * @var        string
     */
    protected $city;

    /**
     * The value for the state field.
     * @var        string
     */
    protected $state;

    /**
     * The value for the zip field.
     * @var        string
     */
    protected $zip;

    /**
     * The value for the country_id field.
     * @var        int
     */
    protected $country_id;

    /**
     * The value for the website field.
     * @var        string
     */
    protected $website;

    /**
     * The value for the activities field.
     * @var        string
     */
    protected $activities;

    /**
     * The value for the books field.
     * @var        string
     */
    protected $books;

    /**
     * The value for the music field.
     * @var        string
     */
    protected $music;

    /**
     * The value for the movies field.
     * @var        string
     */
    protected $movies;

    /**
     * The value for the tvshows field.
     * @var        string
     */
    protected $tvshows;

    /**
     * The value for the aboutme field.
     * @var        string
     */
    protected $aboutme;

    /**
     * The value for the validate field.
     * @var        string
     */
    protected $validate;

    /**
     * The value for the visibility field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $visibility;

    /**
     * @var        sfGuardUser
     */
    protected $asfGuardUser;

    /**
     * @var        Country
     */
    protected $aCountry;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->status = 0;
        $this->visibility = 0;
    }

    /**
     * Initializes internal state of BasesfGuardUserProfile object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [user_id] column value.
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * Get the [first_name] column value.
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->first_name;
    }

    /**
     * Get the [last_name] column value.
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->last_name;
    }

    /**
     * Get the [photo] column value.
     *
     * @return string
     */
    public function getPhoto()
    {
        return $this->photo;
    }

    /**
     * Get the [optionally formatted] temporal [birthday] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getBirthday($format = 'Y-m-d')
    {
        if ($this->birthday === null) {
            return null;
        }

        if ($this->birthday === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->birthday);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->birthday, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [gender] column value.
     *
     * @return int
     */
    public function getGender()
    {
        return $this->gender;
    }

    /**
     * Get the [status] column value.
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Get the [lookingfor] column value.
     *
     * @return string
     */
    public function getLookingfor()
    {
        return $this->lookingfor;
    }

    /**
     * Get the [city] column value.
     *
     * @return string
     */
    public function getCity()
    {
        return $this->city;
    }

    /**
     * Get the [state] column value.
     *
     * @return string
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Get the [zip] column value.
     *
     * @return string
     */
    public function getZip()
    {
        return $this->zip;
    }

    /**
     * Get the [country_id] column value.
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->country_id;
    }

    /**
     * Get the [website] column value.
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->website;
    }

    /**
     * Get the [activities] column value.
     *
     * @return string
     */
    public function getActivities()
    {
        return $this->activities;
    }

    /**
     * Get the [books] column value.
     *
     * @return string
     */
    public function getBooks()
    {
        return $this->books;
    }

    /**
     * Get the [music] column value.
     *
     * @return string
     */
    public function getMusic()
    {
        return $this->music;
    }

    /**
     * Get the [movies] column value.
     *
     * @return string
     */
    public function getMovies()
    {
        return $this->movies;
    }

    /**
     * Get the [tvshows] column value.
     *
     * @return string
     */
    public function getTvshows()
    {
        return $this->tvshows;
    }

    /**
     * Get the [aboutme] column value.
     *
     * @return string
     */
    public function getAboutme()
    {
        return $this->aboutme;
    }

    /**
     * Get the [validate] column value.
     *
     * @return string
     */
    public function getValidate()
    {
        return $this->validate;
    }

    /**
     * Get the [visibility] column value.
     *
     * @return int
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [user_id] column.
     *
     * @param int $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setUserId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->user_id !== $v) {
            $this->user_id = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::USER_ID;
        }

        if ($this->asfGuardUser !== null && $this->asfGuardUser->getId() !== $v) {
            $this->asfGuardUser = null;
        }


        return $this;
    } // setUserId()

    /**
     * Set the value of [first_name] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setFirstName($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->first_name !== $v) {
            $this->first_name = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::FIRST_NAME;
        }


        return $this;
    } // setFirstName()

    /**
     * Set the value of [last_name] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setLastName($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->last_name !== $v) {
            $this->last_name = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::LAST_NAME;
        }


        return $this;
    } // setLastName()

    /**
     * Set the value of [photo] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setPhoto($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->photo !== $v) {
            $this->photo = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::PHOTO;
        }


        return $this;
    } // setPhoto()

    /**
     * Sets the value of [birthday] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setBirthday($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->birthday !== null || $dt !== null) {
            $currentDateAsString = ($this->birthday !== null && $tmpDt = new DateTime($this->birthday)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->birthday = $newDateAsString;
                $this->modifiedColumns[] = sfGuardUserProfilePeer::BIRTHDAY;
            }
        } // if either are not null


        return $this;
    } // setBirthday()

    /**
     * Set the value of [gender] column.
     *
     * @param int $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setGender($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->gender !== $v) {
            $this->gender = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::GENDER;
        }


        return $this;
    } // setGender()

    /**
     * Set the value of [status] column.
     *
     * @param int $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setStatus($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->status !== $v) {
            $this->status = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::STATUS;
        }


        return $this;
    } // setStatus()

    /**
     * Set the value of [lookingfor] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setLookingfor($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->lookingfor !== $v) {
            $this->lookingfor = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::LOOKINGFOR;
        }


        return $this;
    } // setLookingfor()

    /**
     * Set the value of [city] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setCity($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->city !== $v) {
            $this->city = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::CITY;
        }


        return $this;
    } // setCity()

    /**
     * Set the value of [state] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setState($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->state !== $v) {
            $this->state = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::STATE;
        }


        return $this;
    } // setState()

    /**
     * Set the value of [zip] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setZip($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->zip !== $v) {
            $this->zip = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::ZIP;
        }


        return $this;
    } // setZip()

    /**
     * Set the value of [country_id] column.
     *
     * @param int $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setCountryId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->country_id !== $v) {
            $this->country_id = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::COUNTRY_ID;
        }

        if ($this->aCountry !== null && $this->aCountry->getId() !== $v) {
            $this->aCountry = null;
        }


        return $this;
    } // setCountryId()

    /**
     * Set the value of [website] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setWebsite($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->website !== $v) {
            $this->website = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::WEBSITE;
        }


        return $this;
    } // setWebsite()

    /**
     * Set the value of [activities] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setActivities($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->activities !== $v) {
            $this->activities = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::ACTIVITIES;
        }


        return $this;
    } // setActivities()

    /**
     * Set the value of [books] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setBooks($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->books !== $v) {
            $this->books = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::BOOKS;
        }


        return $this;
    } // setBooks()

    /**
     * Set the value of [music] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setMusic($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->music !== $v) {
            $this->music = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::MUSIC;
        }


        return $this;
    } // setMusic()

    /**
     * Set the value of [movies] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setMovies($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->movies !== $v) {
            $this->movies = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::MOVIES;
        }


        return $this;
    } // setMovies()

    /**
     * Set the value of [tvshows] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setTvshows($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->tvshows !== $v) {
            $this->tvshows = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::TVSHOWS;
        }


        return $this;
    } // setTvshows()

    /**
     * Set the value of [aboutme] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setAboutme($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->aboutme !== $v) {
            $this->aboutme = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::ABOUTME;
        }


        return $this;
    } // setAboutme()

    /**
     * Set the value of [validate] column.
     *
     * @param string $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setValidate($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->validate !== $v) {
            $this->validate = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::VALIDATE;
        }


        return $this;
    } // setValidate()

    /**
     * Set the value of [visibility] column.
     *
     * @param int $v new value
     * @return sfGuardUserProfile The current object (for fluent API support)
     */
    public function setVisibility($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->visibility !== $v) {
            $this->visibility = $v;
            $this->modifiedColumns[] = sfGuardUserProfilePeer::VISIBILITY;
        }


        return $this;
    } // setVisibility()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->status !== 0) {
                return false;
            }

            if ($this->visibility !== 0) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->user_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
            $this->first_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->last_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->photo = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->birthday = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->gender = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
            $this->status = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
            $this->lookingfor = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->city = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->state = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->zip = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->country_id = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
            $this->website = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->activities = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->books = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->music = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
            $this->movies = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
            $this->tvshows = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
            $this->aboutme = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
            $this->validate = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
            $this->visibility = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 22; // 22 = sfGuardUserProfilePeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating sfGuardUserProfile object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->asfGuardUser !== null && $this->user_id !== $this->asfGuardUser->getId()) {
            $this->asfGuardUser = null;
        }
        if ($this->aCountry !== null && $this->country_id !== $this->aCountry->getId()) {
            $this->aCountry = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(sfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = sfGuardUserProfilePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->asfGuardUser = null;
            $this->aCountry = null;
        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(sfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = sfGuardUserProfileQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BasesfGuardUserProfile:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BasesfGuardUserProfile:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(sfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BasesfGuardUserProfile:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BasesfGuardUserProfile:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                sfGuardUserProfilePeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->asfGuardUser !== null) {
                if ($this->asfGuardUser->isModified() || $this->asfGuardUser->isNew()) {
                    $affectedRows += $this->asfGuardUser->save($con);
                }
                $this->setsfGuardUser($this->asfGuardUser);
            }

            if ($this->aCountry !== null) {
                if ($this->aCountry->isModified() || $this->aCountry->isNew()) {
                    $affectedRows += $this->aCountry->save($con);
                }
                $this->setCountry($this->aCountry);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = sfGuardUserProfilePeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . sfGuardUserProfilePeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(sfGuardUserProfilePeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::USER_ID)) {
            $modifiedColumns[':p' . $index++]  = '`USER_ID`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::FIRST_NAME)) {
            $modifiedColumns[':p' . $index++]  = '`FIRST_NAME`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::LAST_NAME)) {
            $modifiedColumns[':p' . $index++]  = '`LAST_NAME`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::PHOTO)) {
            $modifiedColumns[':p' . $index++]  = '`PHOTO`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::BIRTHDAY)) {
            $modifiedColumns[':p' . $index++]  = '`BIRTHDAY`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::GENDER)) {
            $modifiedColumns[':p' . $index++]  = '`GENDER`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::STATUS)) {
            $modifiedColumns[':p' . $index++]  = '`STATUS`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::LOOKINGFOR)) {
            $modifiedColumns[':p' . $index++]  = '`LOOKINGFOR`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::CITY)) {
            $modifiedColumns[':p' . $index++]  = '`CITY`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::STATE)) {
            $modifiedColumns[':p' . $index++]  = '`STATE`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::ZIP)) {
            $modifiedColumns[':p' . $index++]  = '`ZIP`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::COUNTRY_ID)) {
            $modifiedColumns[':p' . $index++]  = '`COUNTRY_ID`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::WEBSITE)) {
            $modifiedColumns[':p' . $index++]  = '`WEBSITE`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::ACTIVITIES)) {
            $modifiedColumns[':p' . $index++]  = '`ACTIVITIES`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::BOOKS)) {
            $modifiedColumns[':p' . $index++]  = '`BOOKS`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::MUSIC)) {
            $modifiedColumns[':p' . $index++]  = '`MUSIC`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::MOVIES)) {
            $modifiedColumns[':p' . $index++]  = '`MOVIES`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::TVSHOWS)) {
            $modifiedColumns[':p' . $index++]  = '`TVSHOWS`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::ABOUTME)) {
            $modifiedColumns[':p' . $index++]  = '`ABOUTME`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::VALIDATE)) {
            $modifiedColumns[':p' . $index++]  = '`VALIDATE`';
        }
        if ($this->isColumnModified(sfGuardUserProfilePeer::VISIBILITY)) {
            $modifiedColumns[':p' . $index++]  = '`VISIBILITY`';
        }

        $sql = sprintf(
            'INSERT INTO `sf_guard_user_profile` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`USER_ID`':
                        $stmt->bindValue($identifier, $this->user_id, PDO::PARAM_INT);
                        break;
                    case '`FIRST_NAME`':
                        $stmt->bindValue($identifier, $this->first_name, PDO::PARAM_STR);
                        break;
                    case '`LAST_NAME`':
                        $stmt->bindValue($identifier, $this->last_name, PDO::PARAM_STR);
                        break;
                    case '`PHOTO`':
                        $stmt->bindValue($identifier, $this->photo, PDO::PARAM_STR);
                        break;
                    case '`BIRTHDAY`':
                        $stmt->bindValue($identifier, $this->birthday, PDO::PARAM_STR);
                        break;
                    case '`GENDER`':
                        $stmt->bindValue($identifier, $this->gender, PDO::PARAM_INT);
                        break;
                    case '`STATUS`':
                        $stmt->bindValue($identifier, $this->status, PDO::PARAM_INT);
                        break;
                    case '`LOOKINGFOR`':
                        $stmt->bindValue($identifier, $this->lookingfor, PDO::PARAM_STR);
                        break;
                    case '`CITY`':
                        $stmt->bindValue($identifier, $this->city, PDO::PARAM_STR);
                        break;
                    case '`STATE`':
                        $stmt->bindValue($identifier, $this->state, PDO::PARAM_STR);
                        break;
                    case '`ZIP`':
                        $stmt->bindValue($identifier, $this->zip, PDO::PARAM_STR);
                        break;
                    case '`COUNTRY_ID`':
                        $stmt->bindValue($identifier, $this->country_id, PDO::PARAM_INT);
                        break;
                    case '`WEBSITE`':
                        $stmt->bindValue($identifier, $this->website, PDO::PARAM_STR);
                        break;
                    case '`ACTIVITIES`':
                        $stmt->bindValue($identifier, $this->activities, PDO::PARAM_STR);
                        break;
                    case '`BOOKS`':
                        $stmt->bindValue($identifier, $this->books, PDO::PARAM_STR);
                        break;
                    case '`MUSIC`':
                        $stmt->bindValue($identifier, $this->music, PDO::PARAM_STR);
                        break;
                    case '`MOVIES`':
                        $stmt->bindValue($identifier, $this->movies, PDO::PARAM_STR);
                        break;
                    case '`TVSHOWS`':
                        $stmt->bindValue($identifier, $this->tvshows, PDO::PARAM_STR);
                        break;
                    case '`ABOUTME`':
                        $stmt->bindValue($identifier, $this->aboutme, PDO::PARAM_STR);
                        break;
                    case '`VALIDATE`':
                        $stmt->bindValue($identifier, $this->validate, PDO::PARAM_STR);
                        break;
                    case '`VISIBILITY`':
                        $stmt->bindValue($identifier, $this->visibility, PDO::PARAM_INT);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->asfGuardUser !== null) {
                if (!$this->asfGuardUser->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->asfGuardUser->getValidationFailures());
                }
            }

            if ($this->aCountry !== null) {
                if (!$this->aCountry->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aCountry->getValidationFailures());
                }
            }


            if (($retval = sfGuardUserProfilePeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }



            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = sfGuardUserProfilePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getUserId();
                break;
            case 2:
                return $this->getFirstName();
                break;
            case 3:
                return $this->getLastName();
                break;
            case 4:
                return $this->getPhoto();
                break;
            case 5:
                return $this->getBirthday();
                break;
            case 6:
                return $this->getGender();
                break;
            case 7:
                return $this->getStatus();
                break;
            case 8:
                return $this->getLookingfor();
                break;
            case 9:
                return $this->getCity();
                break;
            case 10:
                return $this->getState();
                break;
            case 11:
                return $this->getZip();
                break;
            case 12:
                return $this->getCountryId();
                break;
            case 13:
                return $this->getWebsite();
                break;
            case 14:
                return $this->getActivities();
                break;
            case 15:
                return $this->getBooks();
                break;
            case 16:
                return $this->getMusic();
                break;
            case 17:
                return $this->getMovies();
                break;
            case 18:
                return $this->getTvshows();
                break;
            case 19:
                return $this->getAboutme();
                break;
            case 20:
                return $this->getValidate();
                break;
            case 21:
                return $this->getVisibility();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['sfGuardUserProfile'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['sfGuardUserProfile'][$this->getPrimaryKey()] = true;
        $keys = sfGuardUserProfilePeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getUserId(),
            $keys[2] => $this->getFirstName(),
            $keys[3] => $this->getLastName(),
            $keys[4] => $this->getPhoto(),
            $keys[5] => $this->getBirthday(),
            $keys[6] => $this->getGender(),
            $keys[7] => $this->getStatus(),
            $keys[8] => $this->getLookingfor(),
            $keys[9] => $this->getCity(),
            $keys[10] => $this->getState(),
            $keys[11] => $this->getZip(),
            $keys[12] => $this->getCountryId(),
            $keys[13] => $this->getWebsite(),
            $keys[14] => $this->getActivities(),
            $keys[15] => $this->getBooks(),
            $keys[16] => $this->getMusic(),
            $keys[17] => $this->getMovies(),
            $keys[18] => $this->getTvshows(),
            $keys[19] => $this->getAboutme(),
            $keys[20] => $this->getValidate(),
            $keys[21] => $this->getVisibility(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->asfGuardUser) {
                $result['sfGuardUser'] = $this->asfGuardUser->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aCountry) {
                $result['Country'] = $this->aCountry->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = sfGuardUserProfilePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setUserId($value);
                break;
            case 2:
                $this->setFirstName($value);
                break;
            case 3:
                $this->setLastName($value);
                break;
            case 4:
                $this->setPhoto($value);
                break;
            case 5:
                $this->setBirthday($value);
                break;
            case 6:
                $this->setGender($value);
                break;
            case 7:
                $this->setStatus($value);
                break;
            case 8:
                $this->setLookingfor($value);
                break;
            case 9:
                $this->setCity($value);
                break;
            case 10:
                $this->setState($value);
                break;
            case 11:
                $this->setZip($value);
                break;
            case 12:
                $this->setCountryId($value);
                break;
            case 13:
                $this->setWebsite($value);
                break;
            case 14:
                $this->setActivities($value);
                break;
            case 15:
                $this->setBooks($value);
                break;
            case 16:
                $this->setMusic($value);
                break;
            case 17:
                $this->setMovies($value);
                break;
            case 18:
                $this->setTvshows($value);
                break;
            case 19:
                $this->setAboutme($value);
                break;
            case 20:
                $this->setValidate($value);
                break;
            case 21:
                $this->setVisibility($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = sfGuardUserProfilePeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setUserId($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setFirstName($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setLastName($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setPhoto($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setBirthday($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setGender($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setStatus($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setLookingfor($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setCity($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setState($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setZip($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setCountryId($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setWebsite($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setActivities($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setBooks($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setMusic($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setMovies($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setTvshows($arr[$keys[18]]);
        if (array_key_exists($keys[19], $arr)) $this->setAboutme($arr[$keys[19]]);
        if (array_key_exists($keys[20], $arr)) $this->setValidate($arr[$keys[20]]);
        if (array_key_exists($keys[21], $arr)) $this->setVisibility($arr[$keys[21]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(sfGuardUserProfilePeer::DATABASE_NAME);

        if ($this->isColumnModified(sfGuardUserProfilePeer::ID)) $criteria->add(sfGuardUserProfilePeer::ID, $this->id);
        if ($this->isColumnModified(sfGuardUserProfilePeer::USER_ID)) $criteria->add(sfGuardUserProfilePeer::USER_ID, $this->user_id);
        if ($this->isColumnModified(sfGuardUserProfilePeer::FIRST_NAME)) $criteria->add(sfGuardUserProfilePeer::FIRST_NAME, $this->first_name);
        if ($this->isColumnModified(sfGuardUserProfilePeer::LAST_NAME)) $criteria->add(sfGuardUserProfilePeer::LAST_NAME, $this->last_name);
        if ($this->isColumnModified(sfGuardUserProfilePeer::PHOTO)) $criteria->add(sfGuardUserProfilePeer::PHOTO, $this->photo);
        if ($this->isColumnModified(sfGuardUserProfilePeer::BIRTHDAY)) $criteria->add(sfGuardUserProfilePeer::BIRTHDAY, $this->birthday);
        if ($this->isColumnModified(sfGuardUserProfilePeer::GENDER)) $criteria->add(sfGuardUserProfilePeer::GENDER, $this->gender);
        if ($this->isColumnModified(sfGuardUserProfilePeer::STATUS)) $criteria->add(sfGuardUserProfilePeer::STATUS, $this->status);
        if ($this->isColumnModified(sfGuardUserProfilePeer::LOOKINGFOR)) $criteria->add(sfGuardUserProfilePeer::LOOKINGFOR, $this->lookingfor);
        if ($this->isColumnModified(sfGuardUserProfilePeer::CITY)) $criteria->add(sfGuardUserProfilePeer::CITY, $this->city);
        if ($this->isColumnModified(sfGuardUserProfilePeer::STATE)) $criteria->add(sfGuardUserProfilePeer::STATE, $this->state);
        if ($this->isColumnModified(sfGuardUserProfilePeer::ZIP)) $criteria->add(sfGuardUserProfilePeer::ZIP, $this->zip);
        if ($this->isColumnModified(sfGuardUserProfilePeer::COUNTRY_ID)) $criteria->add(sfGuardUserProfilePeer::COUNTRY_ID, $this->country_id);
        if ($this->isColumnModified(sfGuardUserProfilePeer::WEBSITE)) $criteria->add(sfGuardUserProfilePeer::WEBSITE, $this->website);
        if ($this->isColumnModified(sfGuardUserProfilePeer::ACTIVITIES)) $criteria->add(sfGuardUserProfilePeer::ACTIVITIES, $this->activities);
        if ($this->isColumnModified(sfGuardUserProfilePeer::BOOKS)) $criteria->add(sfGuardUserProfilePeer::BOOKS, $this->books);
        if ($this->isColumnModified(sfGuardUserProfilePeer::MUSIC)) $criteria->add(sfGuardUserProfilePeer::MUSIC, $this->music);
        if ($this->isColumnModified(sfGuardUserProfilePeer::MOVIES)) $criteria->add(sfGuardUserProfilePeer::MOVIES, $this->movies);
        if ($this->isColumnModified(sfGuardUserProfilePeer::TVSHOWS)) $criteria->add(sfGuardUserProfilePeer::TVSHOWS, $this->tvshows);
        if ($this->isColumnModified(sfGuardUserProfilePeer::ABOUTME)) $criteria->add(sfGuardUserProfilePeer::ABOUTME, $this->aboutme);
        if ($this->isColumnModified(sfGuardUserProfilePeer::VALIDATE)) $criteria->add(sfGuardUserProfilePeer::VALIDATE, $this->validate);
        if ($this->isColumnModified(sfGuardUserProfilePeer::VISIBILITY)) $criteria->add(sfGuardUserProfilePeer::VISIBILITY, $this->visibility);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(sfGuardUserProfilePeer::DATABASE_NAME);
        $criteria->add(sfGuardUserProfilePeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of sfGuardUserProfile (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setUserId($this->getUserId());
        $copyObj->setFirstName($this->getFirstName());
        $copyObj->setLastName($this->getLastName());
        $copyObj->setPhoto($this->getPhoto());
        $copyObj->setBirthday($this->getBirthday());
        $copyObj->setGender($this->getGender());
        $copyObj->setStatus($this->getStatus());
        $copyObj->setLookingfor($this->getLookingfor());
        $copyObj->setCity($this->getCity());
        $copyObj->setState($this->getState());
        $copyObj->setZip($this->getZip());
        $copyObj->setCountryId($this->getCountryId());
        $copyObj->setWebsite($this->getWebsite());
        $copyObj->setActivities($this->getActivities());
        $copyObj->setBooks($this->getBooks());
        $copyObj->setMusic($this->getMusic());
        $copyObj->setMovies($this->getMovies());
        $copyObj->setTvshows($this->getTvshows());
        $copyObj->setAboutme($this->getAboutme());
        $copyObj->setValidate($this->getValidate());
        $copyObj->setVisibility($this->getVisibility());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return sfGuardUserProfile Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return sfGuardUserProfilePeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new sfGuardUserProfilePeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a sfGuardUser object.
     *
     * @param             sfGuardUser $v
     * @return sfGuardUserProfile The current object (for fluent API support)
     * @throws PropelException
     */
    public function setsfGuardUser(sfGuardUser $v = null)
    {
        if ($v === null) {
            $this->setUserId(NULL);
        } else {
            $this->setUserId($v->getId());
        }

        $this->asfGuardUser = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the sfGuardUser object, it will not be re-added.
        if ($v !== null) {
            $v->addsfGuardUserProfile($this);
        }


        return $this;
    }


    /**
     * Get the associated sfGuardUser object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return sfGuardUser The associated sfGuardUser object.
     * @throws PropelException
     */
    public function getsfGuardUser(PropelPDO $con = null)
    {
        if ($this->asfGuardUser === null && ($this->user_id !== null)) {
            $this->asfGuardUser = sfGuardUserQuery::create()->findPk($this->user_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->asfGuardUser->addsfGuardUserProfiles($this);
             */
        }

        return $this->asfGuardUser;
    }

    /**
     * Declares an association between this object and a Country object.
     *
     * @param             Country $v
     * @return sfGuardUserProfile The current object (for fluent API support)
     * @throws PropelException
     */
    public function setCountry(Country $v = null)
    {
        if ($v === null) {
            $this->setCountryId(NULL);
        } else {
            $this->setCountryId($v->getId());
        }

        $this->aCountry = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Country object, it will not be re-added.
        if ($v !== null) {
            $v->addsfGuardUserProfile($this);
        }


        return $this;
    }


    /**
     * Get the associated Country object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Country The associated Country object.
     * @throws PropelException
     */
    public function getCountry(PropelPDO $con = null)
    {
        if ($this->aCountry === null && ($this->country_id !== null)) {
            $this->aCountry = CountryQuery::create()->findPk($this->country_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aCountry->addsfGuardUserProfiles($this);
             */
        }

        return $this->aCountry;
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->user_id = null;
        $this->first_name = null;
        $this->last_name = null;
        $this->photo = null;
        $this->birthday = null;
        $this->gender = null;
        $this->status = null;
        $this->lookingfor = null;
        $this->city = null;
        $this->state = null;
        $this->zip = null;
        $this->country_id = null;
        $this->website = null;
        $this->activities = null;
        $this->books = null;
        $this->music = null;
        $this->movies = null;
        $this->tvshows = null;
        $this->aboutme = null;
        $this->validate = null;
        $this->visibility = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
        } // if ($deep)

        $this->asfGuardUser = null;
        $this->aCountry = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(sfGuardUserProfilePeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BasesfGuardUserProfile:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
