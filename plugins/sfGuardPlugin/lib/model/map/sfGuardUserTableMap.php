<?php



/**
 * This class defines the structure of the 'sf_guard_user' table.
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 02:13:21 2015
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.plugins.sfGuardPlugin.lib.model.map
 */
class sfGuardUserTableMap extends TableMap
{

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = 'plugins.sfGuardPlugin.lib.model.map.sfGuardUserTableMap';

    /**
     * Initialize the table attributes, columns and validators
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('sf_guard_user');
        $this->setPhpName('sfGuardUser');
        $this->setClassname('sfGuardUser');
        $this->setPackage('plugins.sfGuardPlugin.lib.model');
        $this->setUseIdGenerator(true);
        // columns
        $this->addPrimaryKey('ID', 'Id', 'INTEGER', true, null, null);
        $this->addColumn('USERNAME', 'Username', 'VARCHAR', true, 128, null);
        $this->addColumn('ALGORITHM', 'Algorithm', 'VARCHAR', true, 128, 'sha1');
        $this->addColumn('SALT', 'Salt', 'VARCHAR', true, 128, null);
        $this->addColumn('PASSWORD', 'Password', 'VARCHAR', true, 128, null);
        $this->addColumn('EMAIL', 'Email', 'VARCHAR', true, 100, null);
        $this->addColumn('PASSWORD_HINT', 'PasswordHint', 'VARCHAR', false, 255, null);
        $this->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null, null);
        $this->addColumn('LAST_LOGIN', 'LastLogin', 'TIMESTAMP', false, null, null);
        $this->addColumn('IS_ACTIVE', 'IsActive', 'BOOLEAN', true, 1, false);
        $this->addColumn('IS_SUPER_ADMIN', 'IsSuperAdmin', 'BOOLEAN', true, 1, false);
        // validators
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
        $this->addRelation('Biznes', 'Biznes', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), null, null, 'Bizness');
        $this->addRelation('BiznesComment', 'BiznesComment', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'BiznesComments');
        $this->addRelation('BiznesTag', 'BiznesTag', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'BiznesTags');
        $this->addRelation('BiznesFav', 'BiznesFav', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'BiznesFavs');
        $this->addRelation('BiznesRate', 'BiznesRate', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'BiznesRates');
        $this->addRelation('Album', 'Album', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'Albums');
        $this->addRelation('FriendRelatedByUserId', 'Friend', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'FriendsRelatedByUserId');
        $this->addRelation('FriendRelatedByFriendId', 'Friend', RelationMap::ONE_TO_MANY, array('id' => 'friend_id', ), 'CASCADE', null, 'FriendsRelatedByFriendId');
        $this->addRelation('MessageRelatedByFromUserid', 'Message', RelationMap::ONE_TO_MANY, array('id' => 'from_userid', ), 'CASCADE', null, 'MessagesRelatedByFromUserid');
        $this->addRelation('MessageRelatedByToUserid', 'Message', RelationMap::ONE_TO_MANY, array('id' => 'to_userid', ), 'CASCADE', null, 'MessagesRelatedByToUserid');
        $this->addRelation('Photo', 'Photo', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'Photos');
        $this->addRelation('PhotoComment', 'PhotoComment', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'PhotoComments');
        $this->addRelation('PhotoTag', 'PhotoTag', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'PhotoTags');
        $this->addRelation('PhotoFav', 'PhotoFav', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'PhotoFavs');
        $this->addRelation('PhotoVote', 'PhotoVote', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'PhotoVotes');
        $this->addRelation('PhotoRate', 'PhotoRate', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'PhotoRates');
        $this->addRelation('SchoolUser', 'SchoolUser', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'SchoolUsers');
        $this->addRelation('Updates', 'Updates', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), null, null, 'Updatess');
        $this->addRelation('IgnorelistRelatedByUserId', 'Ignorelist', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'IgnorelistsRelatedByUserId');
        $this->addRelation('IgnorelistRelatedByIgnoredUserId', 'Ignorelist', RelationMap::ONE_TO_MANY, array('id' => 'ignored_user_id', ), 'CASCADE', null, 'IgnorelistsRelatedByIgnoredUserId');
        $this->addRelation('Sessions', 'Sessions', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'Sessionss');
        $this->addRelation('GuestRelatedByUserId', 'Guest', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'GuestsRelatedByUserId');
        $this->addRelation('GuestRelatedByGuestId', 'Guest', RelationMap::ONE_TO_MANY, array('id' => 'guest_id', ), 'CASCADE', null, 'GuestsRelatedByGuestId');
        $this->addRelation('GameUser', 'GameUser', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'GameUsers');
        $this->addRelation('Music', 'Music', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'Musics');
        $this->addRelation('Playlist', 'Playlist', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'Playlists');
        $this->addRelation('PlaylistComment', 'PlaylistComment', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'PlaylistComments');
        $this->addRelation('PlaylistFav', 'PlaylistFav', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'PlaylistFavs');
        $this->addRelation('YtvideoFav', 'YtvideoFav', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'YtvideoFavs');
        $this->addRelation('Videolist', 'Videolist', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'Videolists');
        $this->addRelation('UserLink', 'UserLink', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'UserLinks');
        $this->addRelation('UserLinkComment', 'UserLinkComment', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'UserLinkComments');
        $this->addRelation('sfGuardUserPermission', 'sfGuardUserPermission', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'sfGuardUserPermissions');
        $this->addRelation('sfGuardUserGroup', 'sfGuardUserGroup', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'sfGuardUserGroups');
        $this->addRelation('sfGuardRememberKey', 'sfGuardRememberKey', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'sfGuardRememberKeys');
        $this->addRelation('sfGuardUserProfile', 'sfGuardUserProfile', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'sfGuardUserProfiles');
        $this->addRelation('sfGuardUserStatus', 'sfGuardUserStatus', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'sfGuardUserStatuss');
        $this->addRelation('sfGuardUserStatusComment', 'sfGuardUserStatusComment', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'sfGuardUserStatusComments');
        $this->addRelation('sfSocialEvent', 'sfSocialEvent', RelationMap::ONE_TO_MANY, array('id' => 'user_admin', ), 'CASCADE', 'CASCADE', 'sfSocialEvents');
        $this->addRelation('sfSocialEventInviteRelatedByUserId', 'sfSocialEventInvite', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', 'CASCADE', 'sfSocialEventInvitesRelatedByUserId');
        $this->addRelation('sfSocialEventInviteRelatedByUserFrom', 'sfSocialEventInvite', RelationMap::ONE_TO_MANY, array('id' => 'user_from', ), 'CASCADE', 'CASCADE', 'sfSocialEventInvitesRelatedByUserFrom');
        $this->addRelation('sfSocialEventUser', 'sfSocialEventUser', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', 'CASCADE', 'sfSocialEventUsers');
        $this->addRelation('sfSocialGroup', 'sfSocialGroup', RelationMap::ONE_TO_MANY, array('id' => 'user_admin', ), 'CASCADE', 'CASCADE', 'sfSocialGroups');
        $this->addRelation('sfSocialGroupInviteRelatedByUserId', 'sfSocialGroupInvite', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', 'CASCADE', 'sfSocialGroupInvitesRelatedByUserId');
        $this->addRelation('sfSocialGroupInviteRelatedByUserFrom', 'sfSocialGroupInvite', RelationMap::ONE_TO_MANY, array('id' => 'user_from', ), 'CASCADE', 'CASCADE', 'sfSocialGroupInvitesRelatedByUserFrom');
        $this->addRelation('sfSocialGroupUser', 'sfSocialGroupUser', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', 'CASCADE', 'sfSocialGroupUsers');
        $this->addRelation('GroupStatusComment', 'GroupStatusComment', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', null, 'GroupStatusComments');
        $this->addRelation('EventStatus', 'EventStatus', RelationMap::ONE_TO_MANY, array('id' => 'user_id', ), 'CASCADE', 'CASCADE', 'EventStatuss');
    } // buildRelations()

    /**
     *
     * Gets the list of behaviors registered for this table
     *
     * @return array Associative array (name => parameters) of behaviors
     */
    public function getBehaviors()
    {
        return array(
            'symfony' => array('form' => 'true', 'filter' => 'true', ),
            'symfony_behaviors' => array(),
            'symfony_timestampable' => array('create_column' => 'created_at', ),
        );
    } // getBehaviors()

} // sfGuardUserTableMap
