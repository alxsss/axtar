<?php


/**
 * Base class that represents a query for the 'user_link' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 05:18:53 2015
 *
 * @method UserLinkQuery orderById($order = Criteria::ASC) Order by the id column
 * @method UserLinkQuery orderByUserId($order = Criteria::ASC) Order by the user_id column
 * @method UserLinkQuery orderByStatusText($order = Criteria::ASC) Order by the status_text column
 * @method UserLinkQuery orderByNumComment($order = Criteria::ASC) Order by the num_comment column
 * @method UserLinkQuery orderByImg($order = Criteria::ASC) Order by the img column
 * @method UserLinkQuery orderByUrl($order = Criteria::ASC) Order by the url column
 * @method UserLinkQuery orderByTitle($order = Criteria::ASC) Order by the title column
 * @method UserLinkQuery orderByDescription($order = Criteria::ASC) Order by the description column
 * @method UserLinkQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 *
 * @method UserLinkQuery groupById() Group by the id column
 * @method UserLinkQuery groupByUserId() Group by the user_id column
 * @method UserLinkQuery groupByStatusText() Group by the status_text column
 * @method UserLinkQuery groupByNumComment() Group by the num_comment column
 * @method UserLinkQuery groupByImg() Group by the img column
 * @method UserLinkQuery groupByUrl() Group by the url column
 * @method UserLinkQuery groupByTitle() Group by the title column
 * @method UserLinkQuery groupByDescription() Group by the description column
 * @method UserLinkQuery groupByCreatedAt() Group by the created_at column
 *
 * @method UserLinkQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method UserLinkQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method UserLinkQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method UserLinkQuery leftJoinsfGuardUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfGuardUser relation
 * @method UserLinkQuery rightJoinsfGuardUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfGuardUser relation
 * @method UserLinkQuery innerJoinsfGuardUser($relationAlias = null) Adds a INNER JOIN clause to the query using the sfGuardUser relation
 *
 * @method UserLinkQuery leftJoinUserLinkComment($relationAlias = null) Adds a LEFT JOIN clause to the query using the UserLinkComment relation
 * @method UserLinkQuery rightJoinUserLinkComment($relationAlias = null) Adds a RIGHT JOIN clause to the query using the UserLinkComment relation
 * @method UserLinkQuery innerJoinUserLinkComment($relationAlias = null) Adds a INNER JOIN clause to the query using the UserLinkComment relation
 *
 * @method UserLink findOne(PropelPDO $con = null) Return the first UserLink matching the query
 * @method UserLink findOneOrCreate(PropelPDO $con = null) Return the first UserLink matching the query, or a new UserLink object populated from the query conditions when no match is found
 *
 * @method UserLink findOneById(int $id) Return the first UserLink filtered by the id column
 * @method UserLink findOneByUserId(int $user_id) Return the first UserLink filtered by the user_id column
 * @method UserLink findOneByStatusText(string $status_text) Return the first UserLink filtered by the status_text column
 * @method UserLink findOneByNumComment(int $num_comment) Return the first UserLink filtered by the num_comment column
 * @method UserLink findOneByImg(string $img) Return the first UserLink filtered by the img column
 * @method UserLink findOneByUrl(string $url) Return the first UserLink filtered by the url column
 * @method UserLink findOneByTitle(string $title) Return the first UserLink filtered by the title column
 * @method UserLink findOneByDescription(string $description) Return the first UserLink filtered by the description column
 * @method UserLink findOneByCreatedAt(string $created_at) Return the first UserLink filtered by the created_at column
 *
 * @method array findById(int $id) Return UserLink objects filtered by the id column
 * @method array findByUserId(int $user_id) Return UserLink objects filtered by the user_id column
 * @method array findByStatusText(string $status_text) Return UserLink objects filtered by the status_text column
 * @method array findByNumComment(int $num_comment) Return UserLink objects filtered by the num_comment column
 * @method array findByImg(string $img) Return UserLink objects filtered by the img column
 * @method array findByUrl(string $url) Return UserLink objects filtered by the url column
 * @method array findByTitle(string $title) Return UserLink objects filtered by the title column
 * @method array findByDescription(string $description) Return UserLink objects filtered by the description column
 * @method array findByCreatedAt(string $created_at) Return UserLink objects filtered by the created_at column
 *
 * @package    propel.generator.plugins.sebekePlugin.lib.model.om
 */
abstract class BaseUserLinkQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseUserLinkQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'UserLink', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new UserLinkQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     UserLinkQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return UserLinkQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof UserLinkQuery) {
            return $criteria;
        }
        $query = new UserLinkQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   UserLink|UserLink[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = UserLinkPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(UserLinkPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   UserLink A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `USER_ID`, `STATUS_TEXT`, `NUM_COMMENT`, `IMG`, `URL`, `TITLE`, `DESCRIPTION`, `CREATED_AT` FROM `user_link` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new UserLink();
            $obj->hydrate($row);
            UserLinkPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return UserLink|UserLink[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|UserLink[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(UserLinkPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(UserLinkPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(UserLinkPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the user_id column
     *
     * Example usage:
     * <code>
     * $query->filterByUserId(1234); // WHERE user_id = 1234
     * $query->filterByUserId(array(12, 34)); // WHERE user_id IN (12, 34)
     * $query->filterByUserId(array('min' => 12)); // WHERE user_id > 12
     * </code>
     *
     * @see       filterBysfGuardUser()
     *
     * @param     mixed $userId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByUserId($userId = null, $comparison = null)
    {
        if (is_array($userId)) {
            $useMinMax = false;
            if (isset($userId['min'])) {
                $this->addUsingAlias(UserLinkPeer::USER_ID, $userId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($userId['max'])) {
                $this->addUsingAlias(UserLinkPeer::USER_ID, $userId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserLinkPeer::USER_ID, $userId, $comparison);
    }

    /**
     * Filter the query on the status_text column
     *
     * Example usage:
     * <code>
     * $query->filterByStatusText('fooValue');   // WHERE status_text = 'fooValue'
     * $query->filterByStatusText('%fooValue%'); // WHERE status_text LIKE '%fooValue%'
     * </code>
     *
     * @param     string $statusText The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByStatusText($statusText = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($statusText)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $statusText)) {
                $statusText = str_replace('*', '%', $statusText);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserLinkPeer::STATUS_TEXT, $statusText, $comparison);
    }

    /**
     * Filter the query on the num_comment column
     *
     * Example usage:
     * <code>
     * $query->filterByNumComment(1234); // WHERE num_comment = 1234
     * $query->filterByNumComment(array(12, 34)); // WHERE num_comment IN (12, 34)
     * $query->filterByNumComment(array('min' => 12)); // WHERE num_comment > 12
     * </code>
     *
     * @param     mixed $numComment The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByNumComment($numComment = null, $comparison = null)
    {
        if (is_array($numComment)) {
            $useMinMax = false;
            if (isset($numComment['min'])) {
                $this->addUsingAlias(UserLinkPeer::NUM_COMMENT, $numComment['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($numComment['max'])) {
                $this->addUsingAlias(UserLinkPeer::NUM_COMMENT, $numComment['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserLinkPeer::NUM_COMMENT, $numComment, $comparison);
    }

    /**
     * Filter the query on the img column
     *
     * Example usage:
     * <code>
     * $query->filterByImg('fooValue');   // WHERE img = 'fooValue'
     * $query->filterByImg('%fooValue%'); // WHERE img LIKE '%fooValue%'
     * </code>
     *
     * @param     string $img The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByImg($img = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($img)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $img)) {
                $img = str_replace('*', '%', $img);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserLinkPeer::IMG, $img, $comparison);
    }

    /**
     * Filter the query on the url column
     *
     * Example usage:
     * <code>
     * $query->filterByUrl('fooValue');   // WHERE url = 'fooValue'
     * $query->filterByUrl('%fooValue%'); // WHERE url LIKE '%fooValue%'
     * </code>
     *
     * @param     string $url The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByUrl($url = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($url)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $url)) {
                $url = str_replace('*', '%', $url);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserLinkPeer::URL, $url, $comparison);
    }

    /**
     * Filter the query on the title column
     *
     * Example usage:
     * <code>
     * $query->filterByTitle('fooValue');   // WHERE title = 'fooValue'
     * $query->filterByTitle('%fooValue%'); // WHERE title LIKE '%fooValue%'
     * </code>
     *
     * @param     string $title The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByTitle($title = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($title)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $title)) {
                $title = str_replace('*', '%', $title);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserLinkPeer::TITLE, $title, $comparison);
    }

    /**
     * Filter the query on the description column
     *
     * Example usage:
     * <code>
     * $query->filterByDescription('fooValue');   // WHERE description = 'fooValue'
     * $query->filterByDescription('%fooValue%'); // WHERE description LIKE '%fooValue%'
     * </code>
     *
     * @param     string $description The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByDescription($description = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($description)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $description)) {
                $description = str_replace('*', '%', $description);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(UserLinkPeer::DESCRIPTION, $description, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(UserLinkPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(UserLinkPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(UserLinkPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query by a related sfGuardUser object
     *
     * @param   sfGuardUser|PropelObjectCollection $sfGuardUser The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UserLinkQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBysfGuardUser($sfGuardUser, $comparison = null)
    {
        if ($sfGuardUser instanceof sfGuardUser) {
            return $this
                ->addUsingAlias(UserLinkPeer::USER_ID, $sfGuardUser->getId(), $comparison);
        } elseif ($sfGuardUser instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(UserLinkPeer::USER_ID, $sfGuardUser->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBysfGuardUser() only accepts arguments of type sfGuardUser or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the sfGuardUser relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function joinsfGuardUser($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('sfGuardUser');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'sfGuardUser');
        }

        return $this;
    }

    /**
     * Use the sfGuardUser relation sfGuardUser object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   sfGuardUserQuery A secondary query class using the current class as primary query
     */
    public function usesfGuardUserQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinsfGuardUser($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'sfGuardUser', 'sfGuardUserQuery');
    }

    /**
     * Filter the query by a related UserLinkComment object
     *
     * @param   UserLinkComment|PropelObjectCollection $userLinkComment  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   UserLinkQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByUserLinkComment($userLinkComment, $comparison = null)
    {
        if ($userLinkComment instanceof UserLinkComment) {
            return $this
                ->addUsingAlias(UserLinkPeer::ID, $userLinkComment->getLinkId(), $comparison);
        } elseif ($userLinkComment instanceof PropelObjectCollection) {
            return $this
                ->useUserLinkCommentQuery()
                ->filterByPrimaryKeys($userLinkComment->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByUserLinkComment() only accepts arguments of type UserLinkComment or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the UserLinkComment relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function joinUserLinkComment($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('UserLinkComment');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'UserLinkComment');
        }

        return $this;
    }

    /**
     * Use the UserLinkComment relation UserLinkComment object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   UserLinkCommentQuery A secondary query class using the current class as primary query
     */
    public function useUserLinkCommentQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinUserLinkComment($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'UserLinkComment', 'UserLinkCommentQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   UserLink $userLink Object to remove from the list of results
     *
     * @return UserLinkQuery The current query, for fluid interface
     */
    public function prune($userLink = null)
    {
        if ($userLink) {
            $this->addUsingAlias(UserLinkPeer::ID, $userLink->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
