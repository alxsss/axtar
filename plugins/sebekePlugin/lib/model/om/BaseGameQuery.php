<?php


/**
 * Base class that represents a query for the 'game' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 03:26:40 2015
 *
 * @method GameQuery orderById($order = Criteria::ASC) Order by the id column
 * @method GameQuery orderByGameCategoryId($order = Criteria::ASC) Order by the game_category_id column
 * @method GameQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method GameQuery orderByDescription($order = Criteria::ASC) Order by the description column
 * @method GameQuery orderByEmbedCode($order = Criteria::ASC) Order by the embed_code column
 * @method GameQuery orderByThumb($order = Criteria::ASC) Order by the thumb column
 * @method GameQuery orderByCreativeScreenshot($order = Criteria::ASC) Order by the creative_screenshot column
 * @method GameQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method GameQuery orderByScore($order = Criteria::ASC) Order by the score column
 *
 * @method GameQuery groupById() Group by the id column
 * @method GameQuery groupByGameCategoryId() Group by the game_category_id column
 * @method GameQuery groupByName() Group by the name column
 * @method GameQuery groupByDescription() Group by the description column
 * @method GameQuery groupByEmbedCode() Group by the embed_code column
 * @method GameQuery groupByThumb() Group by the thumb column
 * @method GameQuery groupByCreativeScreenshot() Group by the creative_screenshot column
 * @method GameQuery groupByCreatedAt() Group by the created_at column
 * @method GameQuery groupByScore() Group by the score column
 *
 * @method GameQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method GameQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method GameQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method GameQuery leftJoinGameCategory($relationAlias = null) Adds a LEFT JOIN clause to the query using the GameCategory relation
 * @method GameQuery rightJoinGameCategory($relationAlias = null) Adds a RIGHT JOIN clause to the query using the GameCategory relation
 * @method GameQuery innerJoinGameCategory($relationAlias = null) Adds a INNER JOIN clause to the query using the GameCategory relation
 *
 * @method GameQuery leftJoinGameUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the GameUser relation
 * @method GameQuery rightJoinGameUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the GameUser relation
 * @method GameQuery innerJoinGameUser($relationAlias = null) Adds a INNER JOIN clause to the query using the GameUser relation
 *
 * @method Game findOne(PropelPDO $con = null) Return the first Game matching the query
 * @method Game findOneOrCreate(PropelPDO $con = null) Return the first Game matching the query, or a new Game object populated from the query conditions when no match is found
 *
 * @method Game findOneById(int $id) Return the first Game filtered by the id column
 * @method Game findOneByGameCategoryId(int $game_category_id) Return the first Game filtered by the game_category_id column
 * @method Game findOneByName(string $name) Return the first Game filtered by the name column
 * @method Game findOneByDescription(string $description) Return the first Game filtered by the description column
 * @method Game findOneByEmbedCode(string $embed_code) Return the first Game filtered by the embed_code column
 * @method Game findOneByThumb(string $thumb) Return the first Game filtered by the thumb column
 * @method Game findOneByCreativeScreenshot(string $creative_screenshot) Return the first Game filtered by the creative_screenshot column
 * @method Game findOneByCreatedAt(string $created_at) Return the first Game filtered by the created_at column
 * @method Game findOneByScore(int $score) Return the first Game filtered by the score column
 *
 * @method array findById(int $id) Return Game objects filtered by the id column
 * @method array findByGameCategoryId(int $game_category_id) Return Game objects filtered by the game_category_id column
 * @method array findByName(string $name) Return Game objects filtered by the name column
 * @method array findByDescription(string $description) Return Game objects filtered by the description column
 * @method array findByEmbedCode(string $embed_code) Return Game objects filtered by the embed_code column
 * @method array findByThumb(string $thumb) Return Game objects filtered by the thumb column
 * @method array findByCreativeScreenshot(string $creative_screenshot) Return Game objects filtered by the creative_screenshot column
 * @method array findByCreatedAt(string $created_at) Return Game objects filtered by the created_at column
 * @method array findByScore(int $score) Return Game objects filtered by the score column
 *
 * @package    propel.generator.plugins.sebekePlugin.lib.model.om
 */
abstract class BaseGameQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseGameQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Game', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new GameQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     GameQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return GameQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof GameQuery) {
            return $criteria;
        }
        $query = new GameQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Game|Game[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = GamePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(GamePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Game A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `GAME_CATEGORY_ID`, `NAME`, `DESCRIPTION`, `EMBED_CODE`, `THUMB`, `CREATIVE_SCREENSHOT`, `CREATED_AT`, `SCORE` FROM `game` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Game();
            $obj->hydrate($row);
            GamePeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Game|Game[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Game[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(GamePeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(GamePeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(GamePeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the game_category_id column
     *
     * Example usage:
     * <code>
     * $query->filterByGameCategoryId(1234); // WHERE game_category_id = 1234
     * $query->filterByGameCategoryId(array(12, 34)); // WHERE game_category_id IN (12, 34)
     * $query->filterByGameCategoryId(array('min' => 12)); // WHERE game_category_id > 12
     * </code>
     *
     * @see       filterByGameCategory()
     *
     * @param     mixed $gameCategoryId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByGameCategoryId($gameCategoryId = null, $comparison = null)
    {
        if (is_array($gameCategoryId)) {
            $useMinMax = false;
            if (isset($gameCategoryId['min'])) {
                $this->addUsingAlias(GamePeer::GAME_CATEGORY_ID, $gameCategoryId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($gameCategoryId['max'])) {
                $this->addUsingAlias(GamePeer::GAME_CATEGORY_ID, $gameCategoryId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(GamePeer::GAME_CATEGORY_ID, $gameCategoryId, $comparison);
    }

    /**
     * Filter the query on the name column
     *
     * Example usage:
     * <code>
     * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
     * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $name The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByName($name = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($name)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $name)) {
                $name = str_replace('*', '%', $name);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(GamePeer::NAME, $name, $comparison);
    }

    /**
     * Filter the query on the description column
     *
     * Example usage:
     * <code>
     * $query->filterByDescription('fooValue');   // WHERE description = 'fooValue'
     * $query->filterByDescription('%fooValue%'); // WHERE description LIKE '%fooValue%'
     * </code>
     *
     * @param     string $description The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByDescription($description = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($description)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $description)) {
                $description = str_replace('*', '%', $description);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(GamePeer::DESCRIPTION, $description, $comparison);
    }

    /**
     * Filter the query on the embed_code column
     *
     * Example usage:
     * <code>
     * $query->filterByEmbedCode('fooValue');   // WHERE embed_code = 'fooValue'
     * $query->filterByEmbedCode('%fooValue%'); // WHERE embed_code LIKE '%fooValue%'
     * </code>
     *
     * @param     string $embedCode The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByEmbedCode($embedCode = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($embedCode)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $embedCode)) {
                $embedCode = str_replace('*', '%', $embedCode);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(GamePeer::EMBED_CODE, $embedCode, $comparison);
    }

    /**
     * Filter the query on the thumb column
     *
     * Example usage:
     * <code>
     * $query->filterByThumb('fooValue');   // WHERE thumb = 'fooValue'
     * $query->filterByThumb('%fooValue%'); // WHERE thumb LIKE '%fooValue%'
     * </code>
     *
     * @param     string $thumb The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByThumb($thumb = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($thumb)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $thumb)) {
                $thumb = str_replace('*', '%', $thumb);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(GamePeer::THUMB, $thumb, $comparison);
    }

    /**
     * Filter the query on the creative_screenshot column
     *
     * Example usage:
     * <code>
     * $query->filterByCreativeScreenshot('fooValue');   // WHERE creative_screenshot = 'fooValue'
     * $query->filterByCreativeScreenshot('%fooValue%'); // WHERE creative_screenshot LIKE '%fooValue%'
     * </code>
     *
     * @param     string $creativeScreenshot The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByCreativeScreenshot($creativeScreenshot = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($creativeScreenshot)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $creativeScreenshot)) {
                $creativeScreenshot = str_replace('*', '%', $creativeScreenshot);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(GamePeer::CREATIVE_SCREENSHOT, $creativeScreenshot, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(GamePeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(GamePeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(GamePeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the score column
     *
     * Example usage:
     * <code>
     * $query->filterByScore(1234); // WHERE score = 1234
     * $query->filterByScore(array(12, 34)); // WHERE score IN (12, 34)
     * $query->filterByScore(array('min' => 12)); // WHERE score > 12
     * </code>
     *
     * @param     mixed $score The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function filterByScore($score = null, $comparison = null)
    {
        if (is_array($score)) {
            $useMinMax = false;
            if (isset($score['min'])) {
                $this->addUsingAlias(GamePeer::SCORE, $score['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($score['max'])) {
                $this->addUsingAlias(GamePeer::SCORE, $score['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(GamePeer::SCORE, $score, $comparison);
    }

    /**
     * Filter the query by a related GameCategory object
     *
     * @param   GameCategory|PropelObjectCollection $gameCategory The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   GameQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByGameCategory($gameCategory, $comparison = null)
    {
        if ($gameCategory instanceof GameCategory) {
            return $this
                ->addUsingAlias(GamePeer::GAME_CATEGORY_ID, $gameCategory->getId(), $comparison);
        } elseif ($gameCategory instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(GamePeer::GAME_CATEGORY_ID, $gameCategory->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByGameCategory() only accepts arguments of type GameCategory or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the GameCategory relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function joinGameCategory($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('GameCategory');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'GameCategory');
        }

        return $this;
    }

    /**
     * Use the GameCategory relation GameCategory object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   GameCategoryQuery A secondary query class using the current class as primary query
     */
    public function useGameCategoryQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinGameCategory($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'GameCategory', 'GameCategoryQuery');
    }

    /**
     * Filter the query by a related GameUser object
     *
     * @param   GameUser|PropelObjectCollection $gameUser  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   GameQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByGameUser($gameUser, $comparison = null)
    {
        if ($gameUser instanceof GameUser) {
            return $this
                ->addUsingAlias(GamePeer::ID, $gameUser->getGameId(), $comparison);
        } elseif ($gameUser instanceof PropelObjectCollection) {
            return $this
                ->useGameUserQuery()
                ->filterByPrimaryKeys($gameUser->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByGameUser() only accepts arguments of type GameUser or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the GameUser relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function joinGameUser($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('GameUser');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'GameUser');
        }

        return $this;
    }

    /**
     * Use the GameUser relation GameUser object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   GameUserQuery A secondary query class using the current class as primary query
     */
    public function useGameUserQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinGameUser($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'GameUser', 'GameUserQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Game $game Object to remove from the list of results
     *
     * @return GameQuery The current query, for fluid interface
     */
    public function prune($game = null)
    {
        if ($game) {
            $this->addUsingAlias(GamePeer::ID, $game->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
