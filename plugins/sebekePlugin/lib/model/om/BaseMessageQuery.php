<?php


/**
 * Base class that represents a query for the 'message' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 05:18:51 2015
 *
 * @method MessageQuery orderById($order = Criteria::ASC) Order by the id column
 * @method MessageQuery orderBySubject($order = Criteria::ASC) Order by the subject column
 * @method MessageQuery orderByFromUserid($order = Criteria::ASC) Order by the from_userid column
 * @method MessageQuery orderByToUserid($order = Criteria::ASC) Order by the to_userid column
 * @method MessageQuery orderByFromDeltype($order = Criteria::ASC) Order by the from_deltype column
 * @method MessageQuery orderByToDeltype($order = Criteria::ASC) Order by the to_deltype column
 * @method MessageQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method MessageQuery orderByMsgtext($order = Criteria::ASC) Order by the msgtext column
 * @method MessageQuery orderByReadUnread($order = Criteria::ASC) Order by the read_unread column
 *
 * @method MessageQuery groupById() Group by the id column
 * @method MessageQuery groupBySubject() Group by the subject column
 * @method MessageQuery groupByFromUserid() Group by the from_userid column
 * @method MessageQuery groupByToUserid() Group by the to_userid column
 * @method MessageQuery groupByFromDeltype() Group by the from_deltype column
 * @method MessageQuery groupByToDeltype() Group by the to_deltype column
 * @method MessageQuery groupByCreatedAt() Group by the created_at column
 * @method MessageQuery groupByMsgtext() Group by the msgtext column
 * @method MessageQuery groupByReadUnread() Group by the read_unread column
 *
 * @method MessageQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method MessageQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method MessageQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method MessageQuery leftJoinsfGuardUserRelatedByFromUserid($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfGuardUserRelatedByFromUserid relation
 * @method MessageQuery rightJoinsfGuardUserRelatedByFromUserid($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfGuardUserRelatedByFromUserid relation
 * @method MessageQuery innerJoinsfGuardUserRelatedByFromUserid($relationAlias = null) Adds a INNER JOIN clause to the query using the sfGuardUserRelatedByFromUserid relation
 *
 * @method MessageQuery leftJoinsfGuardUserRelatedByToUserid($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfGuardUserRelatedByToUserid relation
 * @method MessageQuery rightJoinsfGuardUserRelatedByToUserid($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfGuardUserRelatedByToUserid relation
 * @method MessageQuery innerJoinsfGuardUserRelatedByToUserid($relationAlias = null) Adds a INNER JOIN clause to the query using the sfGuardUserRelatedByToUserid relation
 *
 * @method Message findOne(PropelPDO $con = null) Return the first Message matching the query
 * @method Message findOneOrCreate(PropelPDO $con = null) Return the first Message matching the query, or a new Message object populated from the query conditions when no match is found
 *
 * @method Message findOneById(int $id) Return the first Message filtered by the id column
 * @method Message findOneBySubject(string $subject) Return the first Message filtered by the subject column
 * @method Message findOneByFromUserid(int $from_userid) Return the first Message filtered by the from_userid column
 * @method Message findOneByToUserid(int $to_userid) Return the first Message filtered by the to_userid column
 * @method Message findOneByFromDeltype(int $from_deltype) Return the first Message filtered by the from_deltype column
 * @method Message findOneByToDeltype(int $to_deltype) Return the first Message filtered by the to_deltype column
 * @method Message findOneByCreatedAt(string $created_at) Return the first Message filtered by the created_at column
 * @method Message findOneByMsgtext(string $msgtext) Return the first Message filtered by the msgtext column
 * @method Message findOneByReadUnread(boolean $read_unread) Return the first Message filtered by the read_unread column
 *
 * @method array findById(int $id) Return Message objects filtered by the id column
 * @method array findBySubject(string $subject) Return Message objects filtered by the subject column
 * @method array findByFromUserid(int $from_userid) Return Message objects filtered by the from_userid column
 * @method array findByToUserid(int $to_userid) Return Message objects filtered by the to_userid column
 * @method array findByFromDeltype(int $from_deltype) Return Message objects filtered by the from_deltype column
 * @method array findByToDeltype(int $to_deltype) Return Message objects filtered by the to_deltype column
 * @method array findByCreatedAt(string $created_at) Return Message objects filtered by the created_at column
 * @method array findByMsgtext(string $msgtext) Return Message objects filtered by the msgtext column
 * @method array findByReadUnread(boolean $read_unread) Return Message objects filtered by the read_unread column
 *
 * @package    propel.generator.plugins.sebekePlugin.lib.model.om
 */
abstract class BaseMessageQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseMessageQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Message', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new MessageQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     MessageQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return MessageQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof MessageQuery) {
            return $criteria;
        }
        $query = new MessageQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Message|Message[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = MessagePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(MessagePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Message A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `SUBJECT`, `FROM_USERID`, `TO_USERID`, `FROM_DELTYPE`, `TO_DELTYPE`, `CREATED_AT`, `MSGTEXT`, `READ_UNREAD` FROM `message` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Message();
            $obj->hydrate($row);
            MessagePeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Message|Message[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Message[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(MessagePeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(MessagePeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id)) {
            $useMinMax = false;
            if (isset($id['min'])) {
                $this->addUsingAlias(MessagePeer::ID, $id['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($id['max'])) {
                $this->addUsingAlias(MessagePeer::ID, $id['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(MessagePeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the subject column
     *
     * Example usage:
     * <code>
     * $query->filterBySubject('fooValue');   // WHERE subject = 'fooValue'
     * $query->filterBySubject('%fooValue%'); // WHERE subject LIKE '%fooValue%'
     * </code>
     *
     * @param     string $subject The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterBySubject($subject = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($subject)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $subject)) {
                $subject = str_replace('*', '%', $subject);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(MessagePeer::SUBJECT, $subject, $comparison);
    }

    /**
     * Filter the query on the from_userid column
     *
     * Example usage:
     * <code>
     * $query->filterByFromUserid(1234); // WHERE from_userid = 1234
     * $query->filterByFromUserid(array(12, 34)); // WHERE from_userid IN (12, 34)
     * $query->filterByFromUserid(array('min' => 12)); // WHERE from_userid > 12
     * </code>
     *
     * @see       filterBysfGuardUserRelatedByFromUserid()
     *
     * @param     mixed $fromUserid The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterByFromUserid($fromUserid = null, $comparison = null)
    {
        if (is_array($fromUserid)) {
            $useMinMax = false;
            if (isset($fromUserid['min'])) {
                $this->addUsingAlias(MessagePeer::FROM_USERID, $fromUserid['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fromUserid['max'])) {
                $this->addUsingAlias(MessagePeer::FROM_USERID, $fromUserid['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(MessagePeer::FROM_USERID, $fromUserid, $comparison);
    }

    /**
     * Filter the query on the to_userid column
     *
     * Example usage:
     * <code>
     * $query->filterByToUserid(1234); // WHERE to_userid = 1234
     * $query->filterByToUserid(array(12, 34)); // WHERE to_userid IN (12, 34)
     * $query->filterByToUserid(array('min' => 12)); // WHERE to_userid > 12
     * </code>
     *
     * @see       filterBysfGuardUserRelatedByToUserid()
     *
     * @param     mixed $toUserid The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterByToUserid($toUserid = null, $comparison = null)
    {
        if (is_array($toUserid)) {
            $useMinMax = false;
            if (isset($toUserid['min'])) {
                $this->addUsingAlias(MessagePeer::TO_USERID, $toUserid['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($toUserid['max'])) {
                $this->addUsingAlias(MessagePeer::TO_USERID, $toUserid['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(MessagePeer::TO_USERID, $toUserid, $comparison);
    }

    /**
     * Filter the query on the from_deltype column
     *
     * Example usage:
     * <code>
     * $query->filterByFromDeltype(1234); // WHERE from_deltype = 1234
     * $query->filterByFromDeltype(array(12, 34)); // WHERE from_deltype IN (12, 34)
     * $query->filterByFromDeltype(array('min' => 12)); // WHERE from_deltype > 12
     * </code>
     *
     * @param     mixed $fromDeltype The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterByFromDeltype($fromDeltype = null, $comparison = null)
    {
        if (is_array($fromDeltype)) {
            $useMinMax = false;
            if (isset($fromDeltype['min'])) {
                $this->addUsingAlias(MessagePeer::FROM_DELTYPE, $fromDeltype['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($fromDeltype['max'])) {
                $this->addUsingAlias(MessagePeer::FROM_DELTYPE, $fromDeltype['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(MessagePeer::FROM_DELTYPE, $fromDeltype, $comparison);
    }

    /**
     * Filter the query on the to_deltype column
     *
     * Example usage:
     * <code>
     * $query->filterByToDeltype(1234); // WHERE to_deltype = 1234
     * $query->filterByToDeltype(array(12, 34)); // WHERE to_deltype IN (12, 34)
     * $query->filterByToDeltype(array('min' => 12)); // WHERE to_deltype > 12
     * </code>
     *
     * @param     mixed $toDeltype The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterByToDeltype($toDeltype = null, $comparison = null)
    {
        if (is_array($toDeltype)) {
            $useMinMax = false;
            if (isset($toDeltype['min'])) {
                $this->addUsingAlias(MessagePeer::TO_DELTYPE, $toDeltype['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($toDeltype['max'])) {
                $this->addUsingAlias(MessagePeer::TO_DELTYPE, $toDeltype['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(MessagePeer::TO_DELTYPE, $toDeltype, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(MessagePeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(MessagePeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(MessagePeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the msgtext column
     *
     * Example usage:
     * <code>
     * $query->filterByMsgtext('fooValue');   // WHERE msgtext = 'fooValue'
     * $query->filterByMsgtext('%fooValue%'); // WHERE msgtext LIKE '%fooValue%'
     * </code>
     *
     * @param     string $msgtext The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterByMsgtext($msgtext = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($msgtext)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $msgtext)) {
                $msgtext = str_replace('*', '%', $msgtext);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(MessagePeer::MSGTEXT, $msgtext, $comparison);
    }

    /**
     * Filter the query on the read_unread column
     *
     * Example usage:
     * <code>
     * $query->filterByReadUnread(true); // WHERE read_unread = true
     * $query->filterByReadUnread('yes'); // WHERE read_unread = true
     * </code>
     *
     * @param     boolean|string $readUnread The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function filterByReadUnread($readUnread = null, $comparison = null)
    {
        if (is_string($readUnread)) {
            $read_unread = in_array(strtolower($readUnread), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(MessagePeer::READ_UNREAD, $readUnread, $comparison);
    }

    /**
     * Filter the query by a related sfGuardUser object
     *
     * @param   sfGuardUser|PropelObjectCollection $sfGuardUser The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   MessageQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBysfGuardUserRelatedByFromUserid($sfGuardUser, $comparison = null)
    {
        if ($sfGuardUser instanceof sfGuardUser) {
            return $this
                ->addUsingAlias(MessagePeer::FROM_USERID, $sfGuardUser->getId(), $comparison);
        } elseif ($sfGuardUser instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(MessagePeer::FROM_USERID, $sfGuardUser->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBysfGuardUserRelatedByFromUserid() only accepts arguments of type sfGuardUser or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the sfGuardUserRelatedByFromUserid relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function joinsfGuardUserRelatedByFromUserid($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('sfGuardUserRelatedByFromUserid');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'sfGuardUserRelatedByFromUserid');
        }

        return $this;
    }

    /**
     * Use the sfGuardUserRelatedByFromUserid relation sfGuardUser object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   sfGuardUserQuery A secondary query class using the current class as primary query
     */
    public function usesfGuardUserRelatedByFromUseridQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinsfGuardUserRelatedByFromUserid($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'sfGuardUserRelatedByFromUserid', 'sfGuardUserQuery');
    }

    /**
     * Filter the query by a related sfGuardUser object
     *
     * @param   sfGuardUser|PropelObjectCollection $sfGuardUser The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   MessageQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBysfGuardUserRelatedByToUserid($sfGuardUser, $comparison = null)
    {
        if ($sfGuardUser instanceof sfGuardUser) {
            return $this
                ->addUsingAlias(MessagePeer::TO_USERID, $sfGuardUser->getId(), $comparison);
        } elseif ($sfGuardUser instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(MessagePeer::TO_USERID, $sfGuardUser->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBysfGuardUserRelatedByToUserid() only accepts arguments of type sfGuardUser or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the sfGuardUserRelatedByToUserid relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function joinsfGuardUserRelatedByToUserid($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('sfGuardUserRelatedByToUserid');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'sfGuardUserRelatedByToUserid');
        }

        return $this;
    }

    /**
     * Use the sfGuardUserRelatedByToUserid relation sfGuardUser object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   sfGuardUserQuery A secondary query class using the current class as primary query
     */
    public function usesfGuardUserRelatedByToUseridQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinsfGuardUserRelatedByToUserid($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'sfGuardUserRelatedByToUserid', 'sfGuardUserQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Message $message Object to remove from the list of results
     *
     * @return MessageQuery The current query, for fluid interface
     */
    public function prune($message = null)
    {
        if ($message) {
            $this->addUsingAlias(MessagePeer::ID, $message->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
