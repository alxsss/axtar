<?php


/**
 * Base class that represents a query for the 'photo' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 05:18:51 2015
 *
 * @method PhotoQuery orderById($order = Criteria::ASC) Order by the id column
 * @method PhotoQuery orderByAlbumId($order = Criteria::ASC) Order by the album_id column
 * @method PhotoQuery orderByUserId($order = Criteria::ASC) Order by the user_id column
 * @method PhotoQuery orderByFilename($order = Criteria::ASC) Order by the filename column
 * @method PhotoQuery orderByHits($order = Criteria::ASC) Order by the hits column
 * @method PhotoQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method PhotoQuery orderByRating($order = Criteria::ASC) Order by the rating column
 * @method PhotoQuery orderByNumComment($order = Criteria::ASC) Order by the num_comment column
 * @method PhotoQuery orderByVote($order = Criteria::ASC) Order by the vote column
 * @method PhotoQuery orderByTitle($order = Criteria::ASC) Order by the title column
 * @method PhotoQuery orderByApproved($order = Criteria::ASC) Order by the approved column
 * @method PhotoQuery orderByVisibility($order = Criteria::ASC) Order by the visibility column
 * @method PhotoQuery orderByPopularPhoto($order = Criteria::ASC) Order by the popular_photo column
 * @method PhotoQuery orderByRawIp($order = Criteria::ASC) Order by the raw_ip column
 *
 * @method PhotoQuery groupById() Group by the id column
 * @method PhotoQuery groupByAlbumId() Group by the album_id column
 * @method PhotoQuery groupByUserId() Group by the user_id column
 * @method PhotoQuery groupByFilename() Group by the filename column
 * @method PhotoQuery groupByHits() Group by the hits column
 * @method PhotoQuery groupByCreatedAt() Group by the created_at column
 * @method PhotoQuery groupByRating() Group by the rating column
 * @method PhotoQuery groupByNumComment() Group by the num_comment column
 * @method PhotoQuery groupByVote() Group by the vote column
 * @method PhotoQuery groupByTitle() Group by the title column
 * @method PhotoQuery groupByApproved() Group by the approved column
 * @method PhotoQuery groupByVisibility() Group by the visibility column
 * @method PhotoQuery groupByPopularPhoto() Group by the popular_photo column
 * @method PhotoQuery groupByRawIp() Group by the raw_ip column
 *
 * @method PhotoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method PhotoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method PhotoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method PhotoQuery leftJoinAlbum($relationAlias = null) Adds a LEFT JOIN clause to the query using the Album relation
 * @method PhotoQuery rightJoinAlbum($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Album relation
 * @method PhotoQuery innerJoinAlbum($relationAlias = null) Adds a INNER JOIN clause to the query using the Album relation
 *
 * @method PhotoQuery leftJoinsfGuardUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfGuardUser relation
 * @method PhotoQuery rightJoinsfGuardUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfGuardUser relation
 * @method PhotoQuery innerJoinsfGuardUser($relationAlias = null) Adds a INNER JOIN clause to the query using the sfGuardUser relation
 *
 * @method PhotoQuery leftJoinPhotoComment($relationAlias = null) Adds a LEFT JOIN clause to the query using the PhotoComment relation
 * @method PhotoQuery rightJoinPhotoComment($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PhotoComment relation
 * @method PhotoQuery innerJoinPhotoComment($relationAlias = null) Adds a INNER JOIN clause to the query using the PhotoComment relation
 *
 * @method PhotoQuery leftJoinPhotoTag($relationAlias = null) Adds a LEFT JOIN clause to the query using the PhotoTag relation
 * @method PhotoQuery rightJoinPhotoTag($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PhotoTag relation
 * @method PhotoQuery innerJoinPhotoTag($relationAlias = null) Adds a INNER JOIN clause to the query using the PhotoTag relation
 *
 * @method PhotoQuery leftJoinPhotoFav($relationAlias = null) Adds a LEFT JOIN clause to the query using the PhotoFav relation
 * @method PhotoQuery rightJoinPhotoFav($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PhotoFav relation
 * @method PhotoQuery innerJoinPhotoFav($relationAlias = null) Adds a INNER JOIN clause to the query using the PhotoFav relation
 *
 * @method PhotoQuery leftJoinPhotoVote($relationAlias = null) Adds a LEFT JOIN clause to the query using the PhotoVote relation
 * @method PhotoQuery rightJoinPhotoVote($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PhotoVote relation
 * @method PhotoQuery innerJoinPhotoVote($relationAlias = null) Adds a INNER JOIN clause to the query using the PhotoVote relation
 *
 * @method PhotoQuery leftJoinPhotoRate($relationAlias = null) Adds a LEFT JOIN clause to the query using the PhotoRate relation
 * @method PhotoQuery rightJoinPhotoRate($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PhotoRate relation
 * @method PhotoQuery innerJoinPhotoRate($relationAlias = null) Adds a INNER JOIN clause to the query using the PhotoRate relation
 *
 * @method Photo findOne(PropelPDO $con = null) Return the first Photo matching the query
 * @method Photo findOneOrCreate(PropelPDO $con = null) Return the first Photo matching the query, or a new Photo object populated from the query conditions when no match is found
 *
 * @method Photo findOneById(int $id) Return the first Photo filtered by the id column
 * @method Photo findOneByAlbumId(int $album_id) Return the first Photo filtered by the album_id column
 * @method Photo findOneByUserId(int $user_id) Return the first Photo filtered by the user_id column
 * @method Photo findOneByFilename(string $filename) Return the first Photo filtered by the filename column
 * @method Photo findOneByHits(int $hits) Return the first Photo filtered by the hits column
 * @method Photo findOneByCreatedAt(string $created_at) Return the first Photo filtered by the created_at column
 * @method Photo findOneByRating(int $rating) Return the first Photo filtered by the rating column
 * @method Photo findOneByNumComment(int $num_comment) Return the first Photo filtered by the num_comment column
 * @method Photo findOneByVote(int $vote) Return the first Photo filtered by the vote column
 * @method Photo findOneByTitle(string $title) Return the first Photo filtered by the title column
 * @method Photo findOneByApproved(boolean $approved) Return the first Photo filtered by the approved column
 * @method Photo findOneByVisibility(int $visibility) Return the first Photo filtered by the visibility column
 * @method Photo findOneByPopularPhoto(boolean $popular_photo) Return the first Photo filtered by the popular_photo column
 * @method Photo findOneByRawIp(string $raw_ip) Return the first Photo filtered by the raw_ip column
 *
 * @method array findById(int $id) Return Photo objects filtered by the id column
 * @method array findByAlbumId(int $album_id) Return Photo objects filtered by the album_id column
 * @method array findByUserId(int $user_id) Return Photo objects filtered by the user_id column
 * @method array findByFilename(string $filename) Return Photo objects filtered by the filename column
 * @method array findByHits(int $hits) Return Photo objects filtered by the hits column
 * @method array findByCreatedAt(string $created_at) Return Photo objects filtered by the created_at column
 * @method array findByRating(int $rating) Return Photo objects filtered by the rating column
 * @method array findByNumComment(int $num_comment) Return Photo objects filtered by the num_comment column
 * @method array findByVote(int $vote) Return Photo objects filtered by the vote column
 * @method array findByTitle(string $title) Return Photo objects filtered by the title column
 * @method array findByApproved(boolean $approved) Return Photo objects filtered by the approved column
 * @method array findByVisibility(int $visibility) Return Photo objects filtered by the visibility column
 * @method array findByPopularPhoto(boolean $popular_photo) Return Photo objects filtered by the popular_photo column
 * @method array findByRawIp(string $raw_ip) Return Photo objects filtered by the raw_ip column
 *
 * @package    propel.generator.plugins.sebekePlugin.lib.model.om
 */
abstract class BasePhotoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BasePhotoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Photo', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new PhotoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     PhotoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return PhotoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof PhotoQuery) {
            return $criteria;
        }
        $query = new PhotoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Photo|Photo[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = PhotoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(PhotoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Photo A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `ALBUM_ID`, `USER_ID`, `FILENAME`, `HITS`, `CREATED_AT`, `RATING`, `NUM_COMMENT`, `VOTE`, `TITLE`, `APPROVED`, `VISIBILITY`, `POPULAR_PHOTO`, `RAW_IP` FROM `photo` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Photo();
            $obj->hydrate($row);
            PhotoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Photo|Photo[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Photo[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(PhotoPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(PhotoPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(PhotoPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the album_id column
     *
     * Example usage:
     * <code>
     * $query->filterByAlbumId(1234); // WHERE album_id = 1234
     * $query->filterByAlbumId(array(12, 34)); // WHERE album_id IN (12, 34)
     * $query->filterByAlbumId(array('min' => 12)); // WHERE album_id > 12
     * </code>
     *
     * @see       filterByAlbum()
     *
     * @param     mixed $albumId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByAlbumId($albumId = null, $comparison = null)
    {
        if (is_array($albumId)) {
            $useMinMax = false;
            if (isset($albumId['min'])) {
                $this->addUsingAlias(PhotoPeer::ALBUM_ID, $albumId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($albumId['max'])) {
                $this->addUsingAlias(PhotoPeer::ALBUM_ID, $albumId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PhotoPeer::ALBUM_ID, $albumId, $comparison);
    }

    /**
     * Filter the query on the user_id column
     *
     * Example usage:
     * <code>
     * $query->filterByUserId(1234); // WHERE user_id = 1234
     * $query->filterByUserId(array(12, 34)); // WHERE user_id IN (12, 34)
     * $query->filterByUserId(array('min' => 12)); // WHERE user_id > 12
     * </code>
     *
     * @see       filterBysfGuardUser()
     *
     * @param     mixed $userId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByUserId($userId = null, $comparison = null)
    {
        if (is_array($userId)) {
            $useMinMax = false;
            if (isset($userId['min'])) {
                $this->addUsingAlias(PhotoPeer::USER_ID, $userId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($userId['max'])) {
                $this->addUsingAlias(PhotoPeer::USER_ID, $userId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PhotoPeer::USER_ID, $userId, $comparison);
    }

    /**
     * Filter the query on the filename column
     *
     * Example usage:
     * <code>
     * $query->filterByFilename('fooValue');   // WHERE filename = 'fooValue'
     * $query->filterByFilename('%fooValue%'); // WHERE filename LIKE '%fooValue%'
     * </code>
     *
     * @param     string $filename The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByFilename($filename = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($filename)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $filename)) {
                $filename = str_replace('*', '%', $filename);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PhotoPeer::FILENAME, $filename, $comparison);
    }

    /**
     * Filter the query on the hits column
     *
     * Example usage:
     * <code>
     * $query->filterByHits(1234); // WHERE hits = 1234
     * $query->filterByHits(array(12, 34)); // WHERE hits IN (12, 34)
     * $query->filterByHits(array('min' => 12)); // WHERE hits > 12
     * </code>
     *
     * @param     mixed $hits The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByHits($hits = null, $comparison = null)
    {
        if (is_array($hits)) {
            $useMinMax = false;
            if (isset($hits['min'])) {
                $this->addUsingAlias(PhotoPeer::HITS, $hits['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hits['max'])) {
                $this->addUsingAlias(PhotoPeer::HITS, $hits['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PhotoPeer::HITS, $hits, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(PhotoPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(PhotoPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PhotoPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the rating column
     *
     * Example usage:
     * <code>
     * $query->filterByRating(1234); // WHERE rating = 1234
     * $query->filterByRating(array(12, 34)); // WHERE rating IN (12, 34)
     * $query->filterByRating(array('min' => 12)); // WHERE rating > 12
     * </code>
     *
     * @param     mixed $rating The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByRating($rating = null, $comparison = null)
    {
        if (is_array($rating)) {
            $useMinMax = false;
            if (isset($rating['min'])) {
                $this->addUsingAlias(PhotoPeer::RATING, $rating['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($rating['max'])) {
                $this->addUsingAlias(PhotoPeer::RATING, $rating['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PhotoPeer::RATING, $rating, $comparison);
    }

    /**
     * Filter the query on the num_comment column
     *
     * Example usage:
     * <code>
     * $query->filterByNumComment(1234); // WHERE num_comment = 1234
     * $query->filterByNumComment(array(12, 34)); // WHERE num_comment IN (12, 34)
     * $query->filterByNumComment(array('min' => 12)); // WHERE num_comment > 12
     * </code>
     *
     * @param     mixed $numComment The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByNumComment($numComment = null, $comparison = null)
    {
        if (is_array($numComment)) {
            $useMinMax = false;
            if (isset($numComment['min'])) {
                $this->addUsingAlias(PhotoPeer::NUM_COMMENT, $numComment['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($numComment['max'])) {
                $this->addUsingAlias(PhotoPeer::NUM_COMMENT, $numComment['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PhotoPeer::NUM_COMMENT, $numComment, $comparison);
    }

    /**
     * Filter the query on the vote column
     *
     * Example usage:
     * <code>
     * $query->filterByVote(1234); // WHERE vote = 1234
     * $query->filterByVote(array(12, 34)); // WHERE vote IN (12, 34)
     * $query->filterByVote(array('min' => 12)); // WHERE vote > 12
     * </code>
     *
     * @param     mixed $vote The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByVote($vote = null, $comparison = null)
    {
        if (is_array($vote)) {
            $useMinMax = false;
            if (isset($vote['min'])) {
                $this->addUsingAlias(PhotoPeer::VOTE, $vote['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($vote['max'])) {
                $this->addUsingAlias(PhotoPeer::VOTE, $vote['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PhotoPeer::VOTE, $vote, $comparison);
    }

    /**
     * Filter the query on the title column
     *
     * Example usage:
     * <code>
     * $query->filterByTitle('fooValue');   // WHERE title = 'fooValue'
     * $query->filterByTitle('%fooValue%'); // WHERE title LIKE '%fooValue%'
     * </code>
     *
     * @param     string $title The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByTitle($title = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($title)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $title)) {
                $title = str_replace('*', '%', $title);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PhotoPeer::TITLE, $title, $comparison);
    }

    /**
     * Filter the query on the approved column
     *
     * Example usage:
     * <code>
     * $query->filterByApproved(true); // WHERE approved = true
     * $query->filterByApproved('yes'); // WHERE approved = true
     * </code>
     *
     * @param     boolean|string $approved The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByApproved($approved = null, $comparison = null)
    {
        if (is_string($approved)) {
            $approved = in_array(strtolower($approved), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PhotoPeer::APPROVED, $approved, $comparison);
    }

    /**
     * Filter the query on the visibility column
     *
     * Example usage:
     * <code>
     * $query->filterByVisibility(1234); // WHERE visibility = 1234
     * $query->filterByVisibility(array(12, 34)); // WHERE visibility IN (12, 34)
     * $query->filterByVisibility(array('min' => 12)); // WHERE visibility > 12
     * </code>
     *
     * @param     mixed $visibility The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByVisibility($visibility = null, $comparison = null)
    {
        if (is_array($visibility)) {
            $useMinMax = false;
            if (isset($visibility['min'])) {
                $this->addUsingAlias(PhotoPeer::VISIBILITY, $visibility['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($visibility['max'])) {
                $this->addUsingAlias(PhotoPeer::VISIBILITY, $visibility['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(PhotoPeer::VISIBILITY, $visibility, $comparison);
    }

    /**
     * Filter the query on the popular_photo column
     *
     * Example usage:
     * <code>
     * $query->filterByPopularPhoto(true); // WHERE popular_photo = true
     * $query->filterByPopularPhoto('yes'); // WHERE popular_photo = true
     * </code>
     *
     * @param     boolean|string $popularPhoto The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByPopularPhoto($popularPhoto = null, $comparison = null)
    {
        if (is_string($popularPhoto)) {
            $popular_photo = in_array(strtolower($popularPhoto), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(PhotoPeer::POPULAR_PHOTO, $popularPhoto, $comparison);
    }

    /**
     * Filter the query on the raw_ip column
     *
     * Example usage:
     * <code>
     * $query->filterByRawIp('fooValue');   // WHERE raw_ip = 'fooValue'
     * $query->filterByRawIp('%fooValue%'); // WHERE raw_ip LIKE '%fooValue%'
     * </code>
     *
     * @param     string $rawIp The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function filterByRawIp($rawIp = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($rawIp)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $rawIp)) {
                $rawIp = str_replace('*', '%', $rawIp);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(PhotoPeer::RAW_IP, $rawIp, $comparison);
    }

    /**
     * Filter the query by a related Album object
     *
     * @param   Album|PropelObjectCollection $album The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PhotoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByAlbum($album, $comparison = null)
    {
        if ($album instanceof Album) {
            return $this
                ->addUsingAlias(PhotoPeer::ALBUM_ID, $album->getId(), $comparison);
        } elseif ($album instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(PhotoPeer::ALBUM_ID, $album->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByAlbum() only accepts arguments of type Album or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Album relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function joinAlbum($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Album');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Album');
        }

        return $this;
    }

    /**
     * Use the Album relation Album object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   AlbumQuery A secondary query class using the current class as primary query
     */
    public function useAlbumQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinAlbum($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Album', 'AlbumQuery');
    }

    /**
     * Filter the query by a related sfGuardUser object
     *
     * @param   sfGuardUser|PropelObjectCollection $sfGuardUser The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PhotoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBysfGuardUser($sfGuardUser, $comparison = null)
    {
        if ($sfGuardUser instanceof sfGuardUser) {
            return $this
                ->addUsingAlias(PhotoPeer::USER_ID, $sfGuardUser->getId(), $comparison);
        } elseif ($sfGuardUser instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(PhotoPeer::USER_ID, $sfGuardUser->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBysfGuardUser() only accepts arguments of type sfGuardUser or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the sfGuardUser relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function joinsfGuardUser($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('sfGuardUser');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'sfGuardUser');
        }

        return $this;
    }

    /**
     * Use the sfGuardUser relation sfGuardUser object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   sfGuardUserQuery A secondary query class using the current class as primary query
     */
    public function usesfGuardUserQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinsfGuardUser($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'sfGuardUser', 'sfGuardUserQuery');
    }

    /**
     * Filter the query by a related PhotoComment object
     *
     * @param   PhotoComment|PropelObjectCollection $photoComment  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PhotoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPhotoComment($photoComment, $comparison = null)
    {
        if ($photoComment instanceof PhotoComment) {
            return $this
                ->addUsingAlias(PhotoPeer::ID, $photoComment->getPhotoId(), $comparison);
        } elseif ($photoComment instanceof PropelObjectCollection) {
            return $this
                ->usePhotoCommentQuery()
                ->filterByPrimaryKeys($photoComment->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByPhotoComment() only accepts arguments of type PhotoComment or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PhotoComment relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function joinPhotoComment($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PhotoComment');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PhotoComment');
        }

        return $this;
    }

    /**
     * Use the PhotoComment relation PhotoComment object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PhotoCommentQuery A secondary query class using the current class as primary query
     */
    public function usePhotoCommentQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinPhotoComment($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PhotoComment', 'PhotoCommentQuery');
    }

    /**
     * Filter the query by a related PhotoTag object
     *
     * @param   PhotoTag|PropelObjectCollection $photoTag  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PhotoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPhotoTag($photoTag, $comparison = null)
    {
        if ($photoTag instanceof PhotoTag) {
            return $this
                ->addUsingAlias(PhotoPeer::ID, $photoTag->getPhotoId(), $comparison);
        } elseif ($photoTag instanceof PropelObjectCollection) {
            return $this
                ->usePhotoTagQuery()
                ->filterByPrimaryKeys($photoTag->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByPhotoTag() only accepts arguments of type PhotoTag or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PhotoTag relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function joinPhotoTag($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PhotoTag');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PhotoTag');
        }

        return $this;
    }

    /**
     * Use the PhotoTag relation PhotoTag object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PhotoTagQuery A secondary query class using the current class as primary query
     */
    public function usePhotoTagQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinPhotoTag($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PhotoTag', 'PhotoTagQuery');
    }

    /**
     * Filter the query by a related PhotoFav object
     *
     * @param   PhotoFav|PropelObjectCollection $photoFav  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PhotoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPhotoFav($photoFav, $comparison = null)
    {
        if ($photoFav instanceof PhotoFav) {
            return $this
                ->addUsingAlias(PhotoPeer::ID, $photoFav->getPhotoId(), $comparison);
        } elseif ($photoFav instanceof PropelObjectCollection) {
            return $this
                ->usePhotoFavQuery()
                ->filterByPrimaryKeys($photoFav->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByPhotoFav() only accepts arguments of type PhotoFav or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PhotoFav relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function joinPhotoFav($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PhotoFav');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PhotoFav');
        }

        return $this;
    }

    /**
     * Use the PhotoFav relation PhotoFav object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PhotoFavQuery A secondary query class using the current class as primary query
     */
    public function usePhotoFavQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinPhotoFav($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PhotoFav', 'PhotoFavQuery');
    }

    /**
     * Filter the query by a related PhotoVote object
     *
     * @param   PhotoVote|PropelObjectCollection $photoVote  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PhotoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPhotoVote($photoVote, $comparison = null)
    {
        if ($photoVote instanceof PhotoVote) {
            return $this
                ->addUsingAlias(PhotoPeer::ID, $photoVote->getPhotoId(), $comparison);
        } elseif ($photoVote instanceof PropelObjectCollection) {
            return $this
                ->usePhotoVoteQuery()
                ->filterByPrimaryKeys($photoVote->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByPhotoVote() only accepts arguments of type PhotoVote or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PhotoVote relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function joinPhotoVote($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PhotoVote');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PhotoVote');
        }

        return $this;
    }

    /**
     * Use the PhotoVote relation PhotoVote object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PhotoVoteQuery A secondary query class using the current class as primary query
     */
    public function usePhotoVoteQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinPhotoVote($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PhotoVote', 'PhotoVoteQuery');
    }

    /**
     * Filter the query by a related PhotoRate object
     *
     * @param   PhotoRate|PropelObjectCollection $photoRate  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   PhotoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPhotoRate($photoRate, $comparison = null)
    {
        if ($photoRate instanceof PhotoRate) {
            return $this
                ->addUsingAlias(PhotoPeer::ID, $photoRate->getPhotoId(), $comparison);
        } elseif ($photoRate instanceof PropelObjectCollection) {
            return $this
                ->usePhotoRateQuery()
                ->filterByPrimaryKeys($photoRate->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByPhotoRate() only accepts arguments of type PhotoRate or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PhotoRate relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function joinPhotoRate($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PhotoRate');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PhotoRate');
        }

        return $this;
    }

    /**
     * Use the PhotoRate relation PhotoRate object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PhotoRateQuery A secondary query class using the current class as primary query
     */
    public function usePhotoRateQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinPhotoRate($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PhotoRate', 'PhotoRateQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Photo $photo Object to remove from the list of results
     *
     * @return PhotoQuery The current query, for fluid interface
     */
    public function prune($photo = null)
    {
        if ($photo) {
            $this->addUsingAlias(PhotoPeer::ID, $photo->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
