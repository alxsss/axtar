<?php


/**
 * Base class that represents a row from the 'photo' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 05:18:51 2015
 *
 * @package    propel.generator.plugins.sebekePlugin.lib.model.om
 */
abstract class BasePhoto extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'PhotoPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        PhotoPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the album_id field.
     * @var        int
     */
    protected $album_id;

    /**
     * The value for the user_id field.
     * @var        int
     */
    protected $user_id;

    /**
     * The value for the filename field.
     * @var        string
     */
    protected $filename;

    /**
     * The value for the hits field.
     * @var        int
     */
    protected $hits;

    /**
     * The value for the created_at field.
     * @var        string
     */
    protected $created_at;

    /**
     * The value for the rating field.
     * @var        int
     */
    protected $rating;

    /**
     * The value for the num_comment field.
     * @var        int
     */
    protected $num_comment;

    /**
     * The value for the vote field.
     * @var        int
     */
    protected $vote;

    /**
     * The value for the title field.
     * @var        string
     */
    protected $title;

    /**
     * The value for the approved field.
     * Note: this column has a database default value of: true
     * @var        boolean
     */
    protected $approved;

    /**
     * The value for the visibility field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $visibility;

    /**
     * The value for the popular_photo field.
     * Note: this column has a database default value of: false
     * @var        boolean
     */
    protected $popular_photo;

    /**
     * The value for the raw_ip field.
     * @var        string
     */
    protected $raw_ip;

    /**
     * @var        Album
     */
    protected $aAlbum;

    /**
     * @var        sfGuardUser
     */
    protected $asfGuardUser;

    /**
     * @var        PropelObjectCollection|PhotoComment[] Collection to store aggregation of PhotoComment objects.
     */
    protected $collPhotoComments;
    protected $collPhotoCommentsPartial;

    /**
     * @var        PropelObjectCollection|PhotoTag[] Collection to store aggregation of PhotoTag objects.
     */
    protected $collPhotoTags;
    protected $collPhotoTagsPartial;

    /**
     * @var        PropelObjectCollection|PhotoFav[] Collection to store aggregation of PhotoFav objects.
     */
    protected $collPhotoFavs;
    protected $collPhotoFavsPartial;

    /**
     * @var        PropelObjectCollection|PhotoVote[] Collection to store aggregation of PhotoVote objects.
     */
    protected $collPhotoVotes;
    protected $collPhotoVotesPartial;

    /**
     * @var        PropelObjectCollection|PhotoRate[] Collection to store aggregation of PhotoRate objects.
     */
    protected $collPhotoRates;
    protected $collPhotoRatesPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $photoCommentsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $photoTagsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $photoFavsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $photoVotesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $photoRatesScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->approved = true;
        $this->visibility = 0;
        $this->popular_photo = false;
    }

    /**
     * Initializes internal state of BasePhoto object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [album_id] column value.
     *
     * @return int
     */
    public function getAlbumId()
    {
        return $this->album_id;
    }

    /**
     * Get the [user_id] column value.
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->user_id;
    }

    /**
     * Get the [filename] column value.
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->filename;
    }

    /**
     * Get the [hits] column value.
     *
     * @return int
     */
    public function getHits()
    {
        return $this->hits;
    }

    /**
     * Get the [optionally formatted] temporal [created_at] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getCreatedAt($format = 'Y-m-d H:i:s')
    {
        if ($this->created_at === null) {
            return null;
        }

        if ($this->created_at === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->created_at);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [rating] column value.
     *
     * @return int
     */
    public function getRating()
    {
        return $this->rating;
    }

    /**
     * Get the [num_comment] column value.
     *
     * @return int
     */
    public function getNumComment()
    {
        return $this->num_comment;
    }

    /**
     * Get the [vote] column value.
     *
     * @return int
     */
    public function getVote()
    {
        return $this->vote;
    }

    /**
     * Get the [title] column value.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Get the [approved] column value.
     *
     * @return boolean
     */
    public function getApproved()
    {
        return $this->approved;
    }

    /**
     * Get the [visibility] column value.
     *
     * @return int
     */
    public function getVisibility()
    {
        return $this->visibility;
    }

    /**
     * Get the [popular_photo] column value.
     *
     * @return boolean
     */
    public function getPopularPhoto()
    {
        return $this->popular_photo;
    }

    /**
     * Get the [raw_ip] column value.
     *
     * @return string
     */
    public function getRawIp()
    {
        return $this->raw_ip;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = PhotoPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [album_id] column.
     *
     * @param int $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setAlbumId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->album_id !== $v) {
            $this->album_id = $v;
            $this->modifiedColumns[] = PhotoPeer::ALBUM_ID;
        }

        if ($this->aAlbum !== null && $this->aAlbum->getId() !== $v) {
            $this->aAlbum = null;
        }


        return $this;
    } // setAlbumId()

    /**
     * Set the value of [user_id] column.
     *
     * @param int $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setUserId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->user_id !== $v) {
            $this->user_id = $v;
            $this->modifiedColumns[] = PhotoPeer::USER_ID;
        }

        if ($this->asfGuardUser !== null && $this->asfGuardUser->getId() !== $v) {
            $this->asfGuardUser = null;
        }


        return $this;
    } // setUserId()

    /**
     * Set the value of [filename] column.
     *
     * @param string $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setFilename($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->filename !== $v) {
            $this->filename = $v;
            $this->modifiedColumns[] = PhotoPeer::FILENAME;
        }


        return $this;
    } // setFilename()

    /**
     * Set the value of [hits] column.
     *
     * @param int $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setHits($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->hits !== $v) {
            $this->hits = $v;
            $this->modifiedColumns[] = PhotoPeer::HITS;
        }


        return $this;
    } // setHits()

    /**
     * Sets the value of [created_at] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Photo The current object (for fluent API support)
     */
    public function setCreatedAt($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->created_at !== null || $dt !== null) {
            $currentDateAsString = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->created_at = $newDateAsString;
                $this->modifiedColumns[] = PhotoPeer::CREATED_AT;
            }
        } // if either are not null


        return $this;
    } // setCreatedAt()

    /**
     * Set the value of [rating] column.
     *
     * @param int $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setRating($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->rating !== $v) {
            $this->rating = $v;
            $this->modifiedColumns[] = PhotoPeer::RATING;
        }


        return $this;
    } // setRating()

    /**
     * Set the value of [num_comment] column.
     *
     * @param int $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setNumComment($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->num_comment !== $v) {
            $this->num_comment = $v;
            $this->modifiedColumns[] = PhotoPeer::NUM_COMMENT;
        }


        return $this;
    } // setNumComment()

    /**
     * Set the value of [vote] column.
     *
     * @param int $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setVote($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->vote !== $v) {
            $this->vote = $v;
            $this->modifiedColumns[] = PhotoPeer::VOTE;
        }


        return $this;
    } // setVote()

    /**
     * Set the value of [title] column.
     *
     * @param string $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setTitle($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->title !== $v) {
            $this->title = $v;
            $this->modifiedColumns[] = PhotoPeer::TITLE;
        }


        return $this;
    } // setTitle()

    /**
     * Sets the value of the [approved] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Photo The current object (for fluent API support)
     */
    public function setApproved($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->approved !== $v) {
            $this->approved = $v;
            $this->modifiedColumns[] = PhotoPeer::APPROVED;
        }


        return $this;
    } // setApproved()

    /**
     * Set the value of [visibility] column.
     *
     * @param int $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setVisibility($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->visibility !== $v) {
            $this->visibility = $v;
            $this->modifiedColumns[] = PhotoPeer::VISIBILITY;
        }


        return $this;
    } // setVisibility()

    /**
     * Sets the value of the [popular_photo] column.
     * Non-boolean arguments are converted using the following rules:
     *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     *
     * @param boolean|integer|string $v The new value
     * @return Photo The current object (for fluent API support)
     */
    public function setPopularPhoto($v)
    {
        if ($v !== null) {
            if (is_string($v)) {
                $v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
            } else {
                $v = (boolean) $v;
            }
        }

        if ($this->popular_photo !== $v) {
            $this->popular_photo = $v;
            $this->modifiedColumns[] = PhotoPeer::POPULAR_PHOTO;
        }


        return $this;
    } // setPopularPhoto()

    /**
     * Set the value of [raw_ip] column.
     *
     * @param string $v new value
     * @return Photo The current object (for fluent API support)
     */
    public function setRawIp($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->raw_ip !== $v) {
            $this->raw_ip = $v;
            $this->modifiedColumns[] = PhotoPeer::RAW_IP;
        }


        return $this;
    } // setRawIp()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->approved !== true) {
                return false;
            }

            if ($this->visibility !== 0) {
                return false;
            }

            if ($this->popular_photo !== false) {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->album_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
            $this->user_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
            $this->filename = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->hits = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
            $this->created_at = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->rating = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
            $this->num_comment = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
            $this->vote = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
            $this->title = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->approved = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
            $this->visibility = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
            $this->popular_photo = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
            $this->raw_ip = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 14; // 14 = PhotoPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Photo object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aAlbum !== null && $this->album_id !== $this->aAlbum->getId()) {
            $this->aAlbum = null;
        }
        if ($this->asfGuardUser !== null && $this->user_id !== $this->asfGuardUser->getId()) {
            $this->asfGuardUser = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(PhotoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = PhotoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aAlbum = null;
            $this->asfGuardUser = null;
            $this->collPhotoComments = null;

            $this->collPhotoTags = null;

            $this->collPhotoFavs = null;

            $this->collPhotoVotes = null;

            $this->collPhotoRates = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(PhotoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = PhotoQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BasePhoto:delete:pre') as $callable)
            {
              if (call_user_func($callable, $this, $con))
              {
                $con->commit();
                return;
              }
            }

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BasePhoto:delete:post') as $callable)
                {
                  call_user_func($callable, $this, $con);
                }

                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(PhotoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // symfony_behaviors behavior
            foreach (sfMixer::getCallables('BasePhoto:save:pre') as $callable)
            {
              if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
              {
                  $con->commit();
                return $affectedRows;
              }
            }

            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // symfony_timestampable behavior
                if (!$this->isColumnModified(PhotoPeer::CREATED_AT))
                {
                  $this->setCreatedAt(time());
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                // symfony_behaviors behavior
                foreach (sfMixer::getCallables('BasePhoto:save:post') as $callable)
                {
                  call_user_func($callable, $this, $con, $affectedRows);
                }

                PhotoPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aAlbum !== null) {
                if ($this->aAlbum->isModified() || $this->aAlbum->isNew()) {
                    $affectedRows += $this->aAlbum->save($con);
                }
                $this->setAlbum($this->aAlbum);
            }

            if ($this->asfGuardUser !== null) {
                if ($this->asfGuardUser->isModified() || $this->asfGuardUser->isNew()) {
                    $affectedRows += $this->asfGuardUser->save($con);
                }
                $this->setsfGuardUser($this->asfGuardUser);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->photoCommentsScheduledForDeletion !== null) {
                if (!$this->photoCommentsScheduledForDeletion->isEmpty()) {
                    PhotoCommentQuery::create()
                        ->filterByPrimaryKeys($this->photoCommentsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->photoCommentsScheduledForDeletion = null;
                }
            }

            if ($this->collPhotoComments !== null) {
                foreach ($this->collPhotoComments as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->photoTagsScheduledForDeletion !== null) {
                if (!$this->photoTagsScheduledForDeletion->isEmpty()) {
                    PhotoTagQuery::create()
                        ->filterByPrimaryKeys($this->photoTagsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->photoTagsScheduledForDeletion = null;
                }
            }

            if ($this->collPhotoTags !== null) {
                foreach ($this->collPhotoTags as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->photoFavsScheduledForDeletion !== null) {
                if (!$this->photoFavsScheduledForDeletion->isEmpty()) {
                    PhotoFavQuery::create()
                        ->filterByPrimaryKeys($this->photoFavsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->photoFavsScheduledForDeletion = null;
                }
            }

            if ($this->collPhotoFavs !== null) {
                foreach ($this->collPhotoFavs as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->photoVotesScheduledForDeletion !== null) {
                if (!$this->photoVotesScheduledForDeletion->isEmpty()) {
                    PhotoVoteQuery::create()
                        ->filterByPrimaryKeys($this->photoVotesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->photoVotesScheduledForDeletion = null;
                }
            }

            if ($this->collPhotoVotes !== null) {
                foreach ($this->collPhotoVotes as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->photoRatesScheduledForDeletion !== null) {
                if (!$this->photoRatesScheduledForDeletion->isEmpty()) {
                    PhotoRateQuery::create()
                        ->filterByPrimaryKeys($this->photoRatesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->photoRatesScheduledForDeletion = null;
                }
            }

            if ($this->collPhotoRates !== null) {
                foreach ($this->collPhotoRates as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = PhotoPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . PhotoPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(PhotoPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(PhotoPeer::ALBUM_ID)) {
            $modifiedColumns[':p' . $index++]  = '`ALBUM_ID`';
        }
        if ($this->isColumnModified(PhotoPeer::USER_ID)) {
            $modifiedColumns[':p' . $index++]  = '`USER_ID`';
        }
        if ($this->isColumnModified(PhotoPeer::FILENAME)) {
            $modifiedColumns[':p' . $index++]  = '`FILENAME`';
        }
        if ($this->isColumnModified(PhotoPeer::HITS)) {
            $modifiedColumns[':p' . $index++]  = '`HITS`';
        }
        if ($this->isColumnModified(PhotoPeer::CREATED_AT)) {
            $modifiedColumns[':p' . $index++]  = '`CREATED_AT`';
        }
        if ($this->isColumnModified(PhotoPeer::RATING)) {
            $modifiedColumns[':p' . $index++]  = '`RATING`';
        }
        if ($this->isColumnModified(PhotoPeer::NUM_COMMENT)) {
            $modifiedColumns[':p' . $index++]  = '`NUM_COMMENT`';
        }
        if ($this->isColumnModified(PhotoPeer::VOTE)) {
            $modifiedColumns[':p' . $index++]  = '`VOTE`';
        }
        if ($this->isColumnModified(PhotoPeer::TITLE)) {
            $modifiedColumns[':p' . $index++]  = '`TITLE`';
        }
        if ($this->isColumnModified(PhotoPeer::APPROVED)) {
            $modifiedColumns[':p' . $index++]  = '`APPROVED`';
        }
        if ($this->isColumnModified(PhotoPeer::VISIBILITY)) {
            $modifiedColumns[':p' . $index++]  = '`VISIBILITY`';
        }
        if ($this->isColumnModified(PhotoPeer::POPULAR_PHOTO)) {
            $modifiedColumns[':p' . $index++]  = '`POPULAR_PHOTO`';
        }
        if ($this->isColumnModified(PhotoPeer::RAW_IP)) {
            $modifiedColumns[':p' . $index++]  = '`RAW_IP`';
        }

        $sql = sprintf(
            'INSERT INTO `photo` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`ALBUM_ID`':
                        $stmt->bindValue($identifier, $this->album_id, PDO::PARAM_INT);
                        break;
                    case '`USER_ID`':
                        $stmt->bindValue($identifier, $this->user_id, PDO::PARAM_INT);
                        break;
                    case '`FILENAME`':
                        $stmt->bindValue($identifier, $this->filename, PDO::PARAM_STR);
                        break;
                    case '`HITS`':
                        $stmt->bindValue($identifier, $this->hits, PDO::PARAM_INT);
                        break;
                    case '`CREATED_AT`':
                        $stmt->bindValue($identifier, $this->created_at, PDO::PARAM_STR);
                        break;
                    case '`RATING`':
                        $stmt->bindValue($identifier, $this->rating, PDO::PARAM_INT);
                        break;
                    case '`NUM_COMMENT`':
                        $stmt->bindValue($identifier, $this->num_comment, PDO::PARAM_INT);
                        break;
                    case '`VOTE`':
                        $stmt->bindValue($identifier, $this->vote, PDO::PARAM_INT);
                        break;
                    case '`TITLE`':
                        $stmt->bindValue($identifier, $this->title, PDO::PARAM_STR);
                        break;
                    case '`APPROVED`':
                        $stmt->bindValue($identifier, (int) $this->approved, PDO::PARAM_INT);
                        break;
                    case '`VISIBILITY`':
                        $stmt->bindValue($identifier, $this->visibility, PDO::PARAM_INT);
                        break;
                    case '`POPULAR_PHOTO`':
                        $stmt->bindValue($identifier, (int) $this->popular_photo, PDO::PARAM_INT);
                        break;
                    case '`RAW_IP`':
                        $stmt->bindValue($identifier, $this->raw_ip, PDO::PARAM_STR);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aAlbum !== null) {
                if (!$this->aAlbum->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aAlbum->getValidationFailures());
                }
            }

            if ($this->asfGuardUser !== null) {
                if (!$this->asfGuardUser->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->asfGuardUser->getValidationFailures());
                }
            }


            if (($retval = PhotoPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collPhotoComments !== null) {
                    foreach ($this->collPhotoComments as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collPhotoTags !== null) {
                    foreach ($this->collPhotoTags as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collPhotoFavs !== null) {
                    foreach ($this->collPhotoFavs as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collPhotoVotes !== null) {
                    foreach ($this->collPhotoVotes as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collPhotoRates !== null) {
                    foreach ($this->collPhotoRates as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = PhotoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getAlbumId();
                break;
            case 2:
                return $this->getUserId();
                break;
            case 3:
                return $this->getFilename();
                break;
            case 4:
                return $this->getHits();
                break;
            case 5:
                return $this->getCreatedAt();
                break;
            case 6:
                return $this->getRating();
                break;
            case 7:
                return $this->getNumComment();
                break;
            case 8:
                return $this->getVote();
                break;
            case 9:
                return $this->getTitle();
                break;
            case 10:
                return $this->getApproved();
                break;
            case 11:
                return $this->getVisibility();
                break;
            case 12:
                return $this->getPopularPhoto();
                break;
            case 13:
                return $this->getRawIp();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Photo'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Photo'][$this->getPrimaryKey()] = true;
        $keys = PhotoPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getAlbumId(),
            $keys[2] => $this->getUserId(),
            $keys[3] => $this->getFilename(),
            $keys[4] => $this->getHits(),
            $keys[5] => $this->getCreatedAt(),
            $keys[6] => $this->getRating(),
            $keys[7] => $this->getNumComment(),
            $keys[8] => $this->getVote(),
            $keys[9] => $this->getTitle(),
            $keys[10] => $this->getApproved(),
            $keys[11] => $this->getVisibility(),
            $keys[12] => $this->getPopularPhoto(),
            $keys[13] => $this->getRawIp(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->aAlbum) {
                $result['Album'] = $this->aAlbum->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->asfGuardUser) {
                $result['sfGuardUser'] = $this->asfGuardUser->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collPhotoComments) {
                $result['PhotoComments'] = $this->collPhotoComments->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collPhotoTags) {
                $result['PhotoTags'] = $this->collPhotoTags->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collPhotoFavs) {
                $result['PhotoFavs'] = $this->collPhotoFavs->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collPhotoVotes) {
                $result['PhotoVotes'] = $this->collPhotoVotes->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collPhotoRates) {
                $result['PhotoRates'] = $this->collPhotoRates->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = PhotoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setAlbumId($value);
                break;
            case 2:
                $this->setUserId($value);
                break;
            case 3:
                $this->setFilename($value);
                break;
            case 4:
                $this->setHits($value);
                break;
            case 5:
                $this->setCreatedAt($value);
                break;
            case 6:
                $this->setRating($value);
                break;
            case 7:
                $this->setNumComment($value);
                break;
            case 8:
                $this->setVote($value);
                break;
            case 9:
                $this->setTitle($value);
                break;
            case 10:
                $this->setApproved($value);
                break;
            case 11:
                $this->setVisibility($value);
                break;
            case 12:
                $this->setPopularPhoto($value);
                break;
            case 13:
                $this->setRawIp($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = PhotoPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setAlbumId($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setUserId($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setFilename($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setHits($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setCreatedAt($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setRating($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setNumComment($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setVote($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setTitle($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setApproved($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setVisibility($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setPopularPhoto($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setRawIp($arr[$keys[13]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(PhotoPeer::DATABASE_NAME);

        if ($this->isColumnModified(PhotoPeer::ID)) $criteria->add(PhotoPeer::ID, $this->id);
        if ($this->isColumnModified(PhotoPeer::ALBUM_ID)) $criteria->add(PhotoPeer::ALBUM_ID, $this->album_id);
        if ($this->isColumnModified(PhotoPeer::USER_ID)) $criteria->add(PhotoPeer::USER_ID, $this->user_id);
        if ($this->isColumnModified(PhotoPeer::FILENAME)) $criteria->add(PhotoPeer::FILENAME, $this->filename);
        if ($this->isColumnModified(PhotoPeer::HITS)) $criteria->add(PhotoPeer::HITS, $this->hits);
        if ($this->isColumnModified(PhotoPeer::CREATED_AT)) $criteria->add(PhotoPeer::CREATED_AT, $this->created_at);
        if ($this->isColumnModified(PhotoPeer::RATING)) $criteria->add(PhotoPeer::RATING, $this->rating);
        if ($this->isColumnModified(PhotoPeer::NUM_COMMENT)) $criteria->add(PhotoPeer::NUM_COMMENT, $this->num_comment);
        if ($this->isColumnModified(PhotoPeer::VOTE)) $criteria->add(PhotoPeer::VOTE, $this->vote);
        if ($this->isColumnModified(PhotoPeer::TITLE)) $criteria->add(PhotoPeer::TITLE, $this->title);
        if ($this->isColumnModified(PhotoPeer::APPROVED)) $criteria->add(PhotoPeer::APPROVED, $this->approved);
        if ($this->isColumnModified(PhotoPeer::VISIBILITY)) $criteria->add(PhotoPeer::VISIBILITY, $this->visibility);
        if ($this->isColumnModified(PhotoPeer::POPULAR_PHOTO)) $criteria->add(PhotoPeer::POPULAR_PHOTO, $this->popular_photo);
        if ($this->isColumnModified(PhotoPeer::RAW_IP)) $criteria->add(PhotoPeer::RAW_IP, $this->raw_ip);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(PhotoPeer::DATABASE_NAME);
        $criteria->add(PhotoPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Photo (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setAlbumId($this->getAlbumId());
        $copyObj->setUserId($this->getUserId());
        $copyObj->setFilename($this->getFilename());
        $copyObj->setHits($this->getHits());
        $copyObj->setCreatedAt($this->getCreatedAt());
        $copyObj->setRating($this->getRating());
        $copyObj->setNumComment($this->getNumComment());
        $copyObj->setVote($this->getVote());
        $copyObj->setTitle($this->getTitle());
        $copyObj->setApproved($this->getApproved());
        $copyObj->setVisibility($this->getVisibility());
        $copyObj->setPopularPhoto($this->getPopularPhoto());
        $copyObj->setRawIp($this->getRawIp());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getPhotoComments() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addPhotoComment($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getPhotoTags() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addPhotoTag($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getPhotoFavs() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addPhotoFav($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getPhotoVotes() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addPhotoVote($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getPhotoRates() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addPhotoRate($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Photo Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return PhotoPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new PhotoPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a Album object.
     *
     * @param             Album $v
     * @return Photo The current object (for fluent API support)
     * @throws PropelException
     */
    public function setAlbum(Album $v = null)
    {
        if ($v === null) {
            $this->setAlbumId(NULL);
        } else {
            $this->setAlbumId($v->getId());
        }

        $this->aAlbum = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Album object, it will not be re-added.
        if ($v !== null) {
            $v->addPhoto($this);
        }


        return $this;
    }


    /**
     * Get the associated Album object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Album The associated Album object.
     * @throws PropelException
     */
    public function getAlbum(PropelPDO $con = null)
    {
        if ($this->aAlbum === null && ($this->album_id !== null)) {
            $this->aAlbum = AlbumQuery::create()->findPk($this->album_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aAlbum->addPhotos($this);
             */
        }

        return $this->aAlbum;
    }

    /**
     * Declares an association between this object and a sfGuardUser object.
     *
     * @param             sfGuardUser $v
     * @return Photo The current object (for fluent API support)
     * @throws PropelException
     */
    public function setsfGuardUser(sfGuardUser $v = null)
    {
        if ($v === null) {
            $this->setUserId(NULL);
        } else {
            $this->setUserId($v->getId());
        }

        $this->asfGuardUser = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the sfGuardUser object, it will not be re-added.
        if ($v !== null) {
            $v->addPhoto($this);
        }


        return $this;
    }


    /**
     * Get the associated sfGuardUser object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return sfGuardUser The associated sfGuardUser object.
     * @throws PropelException
     */
    public function getsfGuardUser(PropelPDO $con = null)
    {
        if ($this->asfGuardUser === null && ($this->user_id !== null)) {
            $this->asfGuardUser = sfGuardUserQuery::create()->findPk($this->user_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->asfGuardUser->addPhotos($this);
             */
        }

        return $this->asfGuardUser;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('PhotoComment' == $relationName) {
            $this->initPhotoComments();
        }
        if ('PhotoTag' == $relationName) {
            $this->initPhotoTags();
        }
        if ('PhotoFav' == $relationName) {
            $this->initPhotoFavs();
        }
        if ('PhotoVote' == $relationName) {
            $this->initPhotoVotes();
        }
        if ('PhotoRate' == $relationName) {
            $this->initPhotoRates();
        }
    }

    /**
     * Clears out the collPhotoComments collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addPhotoComments()
     */
    public function clearPhotoComments()
    {
        $this->collPhotoComments = null; // important to set this to null since that means it is uninitialized
        $this->collPhotoCommentsPartial = null;
    }

    /**
     * reset is the collPhotoComments collection loaded partially
     *
     * @return void
     */
    public function resetPartialPhotoComments($v = true)
    {
        $this->collPhotoCommentsPartial = $v;
    }

    /**
     * Initializes the collPhotoComments collection.
     *
     * By default this just sets the collPhotoComments collection to an empty array (like clearcollPhotoComments());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initPhotoComments($overrideExisting = true)
    {
        if (null !== $this->collPhotoComments && !$overrideExisting) {
            return;
        }
        $this->collPhotoComments = new PropelObjectCollection();
        $this->collPhotoComments->setModel('PhotoComment');
    }

    /**
     * Gets an array of PhotoComment objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Photo is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|PhotoComment[] List of PhotoComment objects
     * @throws PropelException
     */
    public function getPhotoComments($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collPhotoCommentsPartial && !$this->isNew();
        if (null === $this->collPhotoComments || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collPhotoComments) {
                // return empty collection
                $this->initPhotoComments();
            } else {
                $collPhotoComments = PhotoCommentQuery::create(null, $criteria)
                    ->filterByPhoto($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collPhotoCommentsPartial && count($collPhotoComments)) {
                      $this->initPhotoComments(false);

                      foreach($collPhotoComments as $obj) {
                        if (false == $this->collPhotoComments->contains($obj)) {
                          $this->collPhotoComments->append($obj);
                        }
                      }

                      $this->collPhotoCommentsPartial = true;
                    }

                    return $collPhotoComments;
                }

                if($partial && $this->collPhotoComments) {
                    foreach($this->collPhotoComments as $obj) {
                        if($obj->isNew()) {
                            $collPhotoComments[] = $obj;
                        }
                    }
                }

                $this->collPhotoComments = $collPhotoComments;
                $this->collPhotoCommentsPartial = false;
            }
        }

        return $this->collPhotoComments;
    }

    /**
     * Sets a collection of PhotoComment objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $photoComments A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setPhotoComments(PropelCollection $photoComments, PropelPDO $con = null)
    {
        $this->photoCommentsScheduledForDeletion = $this->getPhotoComments(new Criteria(), $con)->diff($photoComments);

        foreach ($this->photoCommentsScheduledForDeletion as $photoCommentRemoved) {
            $photoCommentRemoved->setPhoto(null);
        }

        $this->collPhotoComments = null;
        foreach ($photoComments as $photoComment) {
            $this->addPhotoComment($photoComment);
        }

        $this->collPhotoComments = $photoComments;
        $this->collPhotoCommentsPartial = false;
    }

    /**
     * Returns the number of related PhotoComment objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related PhotoComment objects.
     * @throws PropelException
     */
    public function countPhotoComments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collPhotoCommentsPartial && !$this->isNew();
        if (null === $this->collPhotoComments || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collPhotoComments) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getPhotoComments());
                }
                $query = PhotoCommentQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByPhoto($this)
                    ->count($con);
            }
        } else {
            return count($this->collPhotoComments);
        }
    }

    /**
     * Method called to associate a PhotoComment object to this object
     * through the PhotoComment foreign key attribute.
     *
     * @param    PhotoComment $l PhotoComment
     * @return Photo The current object (for fluent API support)
     */
    public function addPhotoComment(PhotoComment $l)
    {
        if ($this->collPhotoComments === null) {
            $this->initPhotoComments();
            $this->collPhotoCommentsPartial = true;
        }
        if (!$this->collPhotoComments->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddPhotoComment($l);
        }

        return $this;
    }

    /**
     * @param	PhotoComment $photoComment The photoComment object to add.
     */
    protected function doAddPhotoComment($photoComment)
    {
        $this->collPhotoComments[]= $photoComment;
        $photoComment->setPhoto($this);
    }

    /**
     * @param	PhotoComment $photoComment The photoComment object to remove.
     */
    public function removePhotoComment($photoComment)
    {
        if ($this->getPhotoComments()->contains($photoComment)) {
            $this->collPhotoComments->remove($this->collPhotoComments->search($photoComment));
            if (null === $this->photoCommentsScheduledForDeletion) {
                $this->photoCommentsScheduledForDeletion = clone $this->collPhotoComments;
                $this->photoCommentsScheduledForDeletion->clear();
            }
            $this->photoCommentsScheduledForDeletion[]= $photoComment;
            $photoComment->setPhoto(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Photo is new, it will return
     * an empty collection; or if this Photo has previously
     * been saved, it will retrieve related PhotoComments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Photo.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|PhotoComment[] List of PhotoComment objects
     */
    public function getPhotoCommentsJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PhotoCommentQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getPhotoComments($query, $con);
    }

    /**
     * Clears out the collPhotoTags collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addPhotoTags()
     */
    public function clearPhotoTags()
    {
        $this->collPhotoTags = null; // important to set this to null since that means it is uninitialized
        $this->collPhotoTagsPartial = null;
    }

    /**
     * reset is the collPhotoTags collection loaded partially
     *
     * @return void
     */
    public function resetPartialPhotoTags($v = true)
    {
        $this->collPhotoTagsPartial = $v;
    }

    /**
     * Initializes the collPhotoTags collection.
     *
     * By default this just sets the collPhotoTags collection to an empty array (like clearcollPhotoTags());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initPhotoTags($overrideExisting = true)
    {
        if (null !== $this->collPhotoTags && !$overrideExisting) {
            return;
        }
        $this->collPhotoTags = new PropelObjectCollection();
        $this->collPhotoTags->setModel('PhotoTag');
    }

    /**
     * Gets an array of PhotoTag objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Photo is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|PhotoTag[] List of PhotoTag objects
     * @throws PropelException
     */
    public function getPhotoTags($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collPhotoTagsPartial && !$this->isNew();
        if (null === $this->collPhotoTags || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collPhotoTags) {
                // return empty collection
                $this->initPhotoTags();
            } else {
                $collPhotoTags = PhotoTagQuery::create(null, $criteria)
                    ->filterByPhoto($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collPhotoTagsPartial && count($collPhotoTags)) {
                      $this->initPhotoTags(false);

                      foreach($collPhotoTags as $obj) {
                        if (false == $this->collPhotoTags->contains($obj)) {
                          $this->collPhotoTags->append($obj);
                        }
                      }

                      $this->collPhotoTagsPartial = true;
                    }

                    return $collPhotoTags;
                }

                if($partial && $this->collPhotoTags) {
                    foreach($this->collPhotoTags as $obj) {
                        if($obj->isNew()) {
                            $collPhotoTags[] = $obj;
                        }
                    }
                }

                $this->collPhotoTags = $collPhotoTags;
                $this->collPhotoTagsPartial = false;
            }
        }

        return $this->collPhotoTags;
    }

    /**
     * Sets a collection of PhotoTag objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $photoTags A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setPhotoTags(PropelCollection $photoTags, PropelPDO $con = null)
    {
        $this->photoTagsScheduledForDeletion = $this->getPhotoTags(new Criteria(), $con)->diff($photoTags);

        foreach ($this->photoTagsScheduledForDeletion as $photoTagRemoved) {
            $photoTagRemoved->setPhoto(null);
        }

        $this->collPhotoTags = null;
        foreach ($photoTags as $photoTag) {
            $this->addPhotoTag($photoTag);
        }

        $this->collPhotoTags = $photoTags;
        $this->collPhotoTagsPartial = false;
    }

    /**
     * Returns the number of related PhotoTag objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related PhotoTag objects.
     * @throws PropelException
     */
    public function countPhotoTags(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collPhotoTagsPartial && !$this->isNew();
        if (null === $this->collPhotoTags || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collPhotoTags) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getPhotoTags());
                }
                $query = PhotoTagQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByPhoto($this)
                    ->count($con);
            }
        } else {
            return count($this->collPhotoTags);
        }
    }

    /**
     * Method called to associate a PhotoTag object to this object
     * through the PhotoTag foreign key attribute.
     *
     * @param    PhotoTag $l PhotoTag
     * @return Photo The current object (for fluent API support)
     */
    public function addPhotoTag(PhotoTag $l)
    {
        if ($this->collPhotoTags === null) {
            $this->initPhotoTags();
            $this->collPhotoTagsPartial = true;
        }
        if (!$this->collPhotoTags->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddPhotoTag($l);
        }

        return $this;
    }

    /**
     * @param	PhotoTag $photoTag The photoTag object to add.
     */
    protected function doAddPhotoTag($photoTag)
    {
        $this->collPhotoTags[]= $photoTag;
        $photoTag->setPhoto($this);
    }

    /**
     * @param	PhotoTag $photoTag The photoTag object to remove.
     */
    public function removePhotoTag($photoTag)
    {
        if ($this->getPhotoTags()->contains($photoTag)) {
            $this->collPhotoTags->remove($this->collPhotoTags->search($photoTag));
            if (null === $this->photoTagsScheduledForDeletion) {
                $this->photoTagsScheduledForDeletion = clone $this->collPhotoTags;
                $this->photoTagsScheduledForDeletion->clear();
            }
            $this->photoTagsScheduledForDeletion[]= $photoTag;
            $photoTag->setPhoto(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Photo is new, it will return
     * an empty collection; or if this Photo has previously
     * been saved, it will retrieve related PhotoTags from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Photo.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|PhotoTag[] List of PhotoTag objects
     */
    public function getPhotoTagsJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PhotoTagQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getPhotoTags($query, $con);
    }

    /**
     * Clears out the collPhotoFavs collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addPhotoFavs()
     */
    public function clearPhotoFavs()
    {
        $this->collPhotoFavs = null; // important to set this to null since that means it is uninitialized
        $this->collPhotoFavsPartial = null;
    }

    /**
     * reset is the collPhotoFavs collection loaded partially
     *
     * @return void
     */
    public function resetPartialPhotoFavs($v = true)
    {
        $this->collPhotoFavsPartial = $v;
    }

    /**
     * Initializes the collPhotoFavs collection.
     *
     * By default this just sets the collPhotoFavs collection to an empty array (like clearcollPhotoFavs());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initPhotoFavs($overrideExisting = true)
    {
        if (null !== $this->collPhotoFavs && !$overrideExisting) {
            return;
        }
        $this->collPhotoFavs = new PropelObjectCollection();
        $this->collPhotoFavs->setModel('PhotoFav');
    }

    /**
     * Gets an array of PhotoFav objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Photo is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|PhotoFav[] List of PhotoFav objects
     * @throws PropelException
     */
    public function getPhotoFavs($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collPhotoFavsPartial && !$this->isNew();
        if (null === $this->collPhotoFavs || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collPhotoFavs) {
                // return empty collection
                $this->initPhotoFavs();
            } else {
                $collPhotoFavs = PhotoFavQuery::create(null, $criteria)
                    ->filterByPhoto($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collPhotoFavsPartial && count($collPhotoFavs)) {
                      $this->initPhotoFavs(false);

                      foreach($collPhotoFavs as $obj) {
                        if (false == $this->collPhotoFavs->contains($obj)) {
                          $this->collPhotoFavs->append($obj);
                        }
                      }

                      $this->collPhotoFavsPartial = true;
                    }

                    return $collPhotoFavs;
                }

                if($partial && $this->collPhotoFavs) {
                    foreach($this->collPhotoFavs as $obj) {
                        if($obj->isNew()) {
                            $collPhotoFavs[] = $obj;
                        }
                    }
                }

                $this->collPhotoFavs = $collPhotoFavs;
                $this->collPhotoFavsPartial = false;
            }
        }

        return $this->collPhotoFavs;
    }

    /**
     * Sets a collection of PhotoFav objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $photoFavs A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setPhotoFavs(PropelCollection $photoFavs, PropelPDO $con = null)
    {
        $this->photoFavsScheduledForDeletion = $this->getPhotoFavs(new Criteria(), $con)->diff($photoFavs);

        foreach ($this->photoFavsScheduledForDeletion as $photoFavRemoved) {
            $photoFavRemoved->setPhoto(null);
        }

        $this->collPhotoFavs = null;
        foreach ($photoFavs as $photoFav) {
            $this->addPhotoFav($photoFav);
        }

        $this->collPhotoFavs = $photoFavs;
        $this->collPhotoFavsPartial = false;
    }

    /**
     * Returns the number of related PhotoFav objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related PhotoFav objects.
     * @throws PropelException
     */
    public function countPhotoFavs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collPhotoFavsPartial && !$this->isNew();
        if (null === $this->collPhotoFavs || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collPhotoFavs) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getPhotoFavs());
                }
                $query = PhotoFavQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByPhoto($this)
                    ->count($con);
            }
        } else {
            return count($this->collPhotoFavs);
        }
    }

    /**
     * Method called to associate a PhotoFav object to this object
     * through the PhotoFav foreign key attribute.
     *
     * @param    PhotoFav $l PhotoFav
     * @return Photo The current object (for fluent API support)
     */
    public function addPhotoFav(PhotoFav $l)
    {
        if ($this->collPhotoFavs === null) {
            $this->initPhotoFavs();
            $this->collPhotoFavsPartial = true;
        }
        if (!$this->collPhotoFavs->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddPhotoFav($l);
        }

        return $this;
    }

    /**
     * @param	PhotoFav $photoFav The photoFav object to add.
     */
    protected function doAddPhotoFav($photoFav)
    {
        $this->collPhotoFavs[]= $photoFav;
        $photoFav->setPhoto($this);
    }

    /**
     * @param	PhotoFav $photoFav The photoFav object to remove.
     */
    public function removePhotoFav($photoFav)
    {
        if ($this->getPhotoFavs()->contains($photoFav)) {
            $this->collPhotoFavs->remove($this->collPhotoFavs->search($photoFav));
            if (null === $this->photoFavsScheduledForDeletion) {
                $this->photoFavsScheduledForDeletion = clone $this->collPhotoFavs;
                $this->photoFavsScheduledForDeletion->clear();
            }
            $this->photoFavsScheduledForDeletion[]= $photoFav;
            $photoFav->setPhoto(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Photo is new, it will return
     * an empty collection; or if this Photo has previously
     * been saved, it will retrieve related PhotoFavs from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Photo.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|PhotoFav[] List of PhotoFav objects
     */
    public function getPhotoFavsJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PhotoFavQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getPhotoFavs($query, $con);
    }

    /**
     * Clears out the collPhotoVotes collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addPhotoVotes()
     */
    public function clearPhotoVotes()
    {
        $this->collPhotoVotes = null; // important to set this to null since that means it is uninitialized
        $this->collPhotoVotesPartial = null;
    }

    /**
     * reset is the collPhotoVotes collection loaded partially
     *
     * @return void
     */
    public function resetPartialPhotoVotes($v = true)
    {
        $this->collPhotoVotesPartial = $v;
    }

    /**
     * Initializes the collPhotoVotes collection.
     *
     * By default this just sets the collPhotoVotes collection to an empty array (like clearcollPhotoVotes());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initPhotoVotes($overrideExisting = true)
    {
        if (null !== $this->collPhotoVotes && !$overrideExisting) {
            return;
        }
        $this->collPhotoVotes = new PropelObjectCollection();
        $this->collPhotoVotes->setModel('PhotoVote');
    }

    /**
     * Gets an array of PhotoVote objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Photo is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|PhotoVote[] List of PhotoVote objects
     * @throws PropelException
     */
    public function getPhotoVotes($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collPhotoVotesPartial && !$this->isNew();
        if (null === $this->collPhotoVotes || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collPhotoVotes) {
                // return empty collection
                $this->initPhotoVotes();
            } else {
                $collPhotoVotes = PhotoVoteQuery::create(null, $criteria)
                    ->filterByPhoto($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collPhotoVotesPartial && count($collPhotoVotes)) {
                      $this->initPhotoVotes(false);

                      foreach($collPhotoVotes as $obj) {
                        if (false == $this->collPhotoVotes->contains($obj)) {
                          $this->collPhotoVotes->append($obj);
                        }
                      }

                      $this->collPhotoVotesPartial = true;
                    }

                    return $collPhotoVotes;
                }

                if($partial && $this->collPhotoVotes) {
                    foreach($this->collPhotoVotes as $obj) {
                        if($obj->isNew()) {
                            $collPhotoVotes[] = $obj;
                        }
                    }
                }

                $this->collPhotoVotes = $collPhotoVotes;
                $this->collPhotoVotesPartial = false;
            }
        }

        return $this->collPhotoVotes;
    }

    /**
     * Sets a collection of PhotoVote objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $photoVotes A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setPhotoVotes(PropelCollection $photoVotes, PropelPDO $con = null)
    {
        $this->photoVotesScheduledForDeletion = $this->getPhotoVotes(new Criteria(), $con)->diff($photoVotes);

        foreach ($this->photoVotesScheduledForDeletion as $photoVoteRemoved) {
            $photoVoteRemoved->setPhoto(null);
        }

        $this->collPhotoVotes = null;
        foreach ($photoVotes as $photoVote) {
            $this->addPhotoVote($photoVote);
        }

        $this->collPhotoVotes = $photoVotes;
        $this->collPhotoVotesPartial = false;
    }

    /**
     * Returns the number of related PhotoVote objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related PhotoVote objects.
     * @throws PropelException
     */
    public function countPhotoVotes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collPhotoVotesPartial && !$this->isNew();
        if (null === $this->collPhotoVotes || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collPhotoVotes) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getPhotoVotes());
                }
                $query = PhotoVoteQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByPhoto($this)
                    ->count($con);
            }
        } else {
            return count($this->collPhotoVotes);
        }
    }

    /**
     * Method called to associate a PhotoVote object to this object
     * through the PhotoVote foreign key attribute.
     *
     * @param    PhotoVote $l PhotoVote
     * @return Photo The current object (for fluent API support)
     */
    public function addPhotoVote(PhotoVote $l)
    {
        if ($this->collPhotoVotes === null) {
            $this->initPhotoVotes();
            $this->collPhotoVotesPartial = true;
        }
        if (!$this->collPhotoVotes->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddPhotoVote($l);
        }

        return $this;
    }

    /**
     * @param	PhotoVote $photoVote The photoVote object to add.
     */
    protected function doAddPhotoVote($photoVote)
    {
        $this->collPhotoVotes[]= $photoVote;
        $photoVote->setPhoto($this);
    }

    /**
     * @param	PhotoVote $photoVote The photoVote object to remove.
     */
    public function removePhotoVote($photoVote)
    {
        if ($this->getPhotoVotes()->contains($photoVote)) {
            $this->collPhotoVotes->remove($this->collPhotoVotes->search($photoVote));
            if (null === $this->photoVotesScheduledForDeletion) {
                $this->photoVotesScheduledForDeletion = clone $this->collPhotoVotes;
                $this->photoVotesScheduledForDeletion->clear();
            }
            $this->photoVotesScheduledForDeletion[]= $photoVote;
            $photoVote->setPhoto(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Photo is new, it will return
     * an empty collection; or if this Photo has previously
     * been saved, it will retrieve related PhotoVotes from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Photo.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|PhotoVote[] List of PhotoVote objects
     */
    public function getPhotoVotesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PhotoVoteQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getPhotoVotes($query, $con);
    }

    /**
     * Clears out the collPhotoRates collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addPhotoRates()
     */
    public function clearPhotoRates()
    {
        $this->collPhotoRates = null; // important to set this to null since that means it is uninitialized
        $this->collPhotoRatesPartial = null;
    }

    /**
     * reset is the collPhotoRates collection loaded partially
     *
     * @return void
     */
    public function resetPartialPhotoRates($v = true)
    {
        $this->collPhotoRatesPartial = $v;
    }

    /**
     * Initializes the collPhotoRates collection.
     *
     * By default this just sets the collPhotoRates collection to an empty array (like clearcollPhotoRates());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initPhotoRates($overrideExisting = true)
    {
        if (null !== $this->collPhotoRates && !$overrideExisting) {
            return;
        }
        $this->collPhotoRates = new PropelObjectCollection();
        $this->collPhotoRates->setModel('PhotoRate');
    }

    /**
     * Gets an array of PhotoRate objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Photo is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|PhotoRate[] List of PhotoRate objects
     * @throws PropelException
     */
    public function getPhotoRates($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collPhotoRatesPartial && !$this->isNew();
        if (null === $this->collPhotoRates || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collPhotoRates) {
                // return empty collection
                $this->initPhotoRates();
            } else {
                $collPhotoRates = PhotoRateQuery::create(null, $criteria)
                    ->filterByPhoto($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collPhotoRatesPartial && count($collPhotoRates)) {
                      $this->initPhotoRates(false);

                      foreach($collPhotoRates as $obj) {
                        if (false == $this->collPhotoRates->contains($obj)) {
                          $this->collPhotoRates->append($obj);
                        }
                      }

                      $this->collPhotoRatesPartial = true;
                    }

                    return $collPhotoRates;
                }

                if($partial && $this->collPhotoRates) {
                    foreach($this->collPhotoRates as $obj) {
                        if($obj->isNew()) {
                            $collPhotoRates[] = $obj;
                        }
                    }
                }

                $this->collPhotoRates = $collPhotoRates;
                $this->collPhotoRatesPartial = false;
            }
        }

        return $this->collPhotoRates;
    }

    /**
     * Sets a collection of PhotoRate objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $photoRates A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setPhotoRates(PropelCollection $photoRates, PropelPDO $con = null)
    {
        $this->photoRatesScheduledForDeletion = $this->getPhotoRates(new Criteria(), $con)->diff($photoRates);

        foreach ($this->photoRatesScheduledForDeletion as $photoRateRemoved) {
            $photoRateRemoved->setPhoto(null);
        }

        $this->collPhotoRates = null;
        foreach ($photoRates as $photoRate) {
            $this->addPhotoRate($photoRate);
        }

        $this->collPhotoRates = $photoRates;
        $this->collPhotoRatesPartial = false;
    }

    /**
     * Returns the number of related PhotoRate objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related PhotoRate objects.
     * @throws PropelException
     */
    public function countPhotoRates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collPhotoRatesPartial && !$this->isNew();
        if (null === $this->collPhotoRates || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collPhotoRates) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getPhotoRates());
                }
                $query = PhotoRateQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByPhoto($this)
                    ->count($con);
            }
        } else {
            return count($this->collPhotoRates);
        }
    }

    /**
     * Method called to associate a PhotoRate object to this object
     * through the PhotoRate foreign key attribute.
     *
     * @param    PhotoRate $l PhotoRate
     * @return Photo The current object (for fluent API support)
     */
    public function addPhotoRate(PhotoRate $l)
    {
        if ($this->collPhotoRates === null) {
            $this->initPhotoRates();
            $this->collPhotoRatesPartial = true;
        }
        if (!$this->collPhotoRates->contains($l)) { // only add it if the **same** object is not already associated
            $this->doAddPhotoRate($l);
        }

        return $this;
    }

    /**
     * @param	PhotoRate $photoRate The photoRate object to add.
     */
    protected function doAddPhotoRate($photoRate)
    {
        $this->collPhotoRates[]= $photoRate;
        $photoRate->setPhoto($this);
    }

    /**
     * @param	PhotoRate $photoRate The photoRate object to remove.
     */
    public function removePhotoRate($photoRate)
    {
        if ($this->getPhotoRates()->contains($photoRate)) {
            $this->collPhotoRates->remove($this->collPhotoRates->search($photoRate));
            if (null === $this->photoRatesScheduledForDeletion) {
                $this->photoRatesScheduledForDeletion = clone $this->collPhotoRates;
                $this->photoRatesScheduledForDeletion->clear();
            }
            $this->photoRatesScheduledForDeletion[]= $photoRate;
            $photoRate->setPhoto(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Photo is new, it will return
     * an empty collection; or if this Photo has previously
     * been saved, it will retrieve related PhotoRates from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Photo.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|PhotoRate[] List of PhotoRate objects
     */
    public function getPhotoRatesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = PhotoRateQuery::create(null, $criteria);
        $query->joinWith('sfGuardUser', $join_behavior);

        return $this->getPhotoRates($query, $con);
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->album_id = null;
        $this->user_id = null;
        $this->filename = null;
        $this->hits = null;
        $this->created_at = null;
        $this->rating = null;
        $this->num_comment = null;
        $this->vote = null;
        $this->title = null;
        $this->approved = null;
        $this->visibility = null;
        $this->popular_photo = null;
        $this->raw_ip = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collPhotoComments) {
                foreach ($this->collPhotoComments as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collPhotoTags) {
                foreach ($this->collPhotoTags as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collPhotoFavs) {
                foreach ($this->collPhotoFavs as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collPhotoVotes) {
                foreach ($this->collPhotoVotes as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collPhotoRates) {
                foreach ($this->collPhotoRates as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collPhotoComments instanceof PropelCollection) {
            $this->collPhotoComments->clearIterator();
        }
        $this->collPhotoComments = null;
        if ($this->collPhotoTags instanceof PropelCollection) {
            $this->collPhotoTags->clearIterator();
        }
        $this->collPhotoTags = null;
        if ($this->collPhotoFavs instanceof PropelCollection) {
            $this->collPhotoFavs->clearIterator();
        }
        $this->collPhotoFavs = null;
        if ($this->collPhotoVotes instanceof PropelCollection) {
            $this->collPhotoVotes->clearIterator();
        }
        $this->collPhotoVotes = null;
        if ($this->collPhotoRates instanceof PropelCollection) {
            $this->collPhotoRates->clearIterator();
        }
        $this->collPhotoRates = null;
        $this->aAlbum = null;
        $this->asfGuardUser = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(PhotoPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    /**
     * Catches calls to virtual methods
     */
    public function __call($name, $params)
    {

        // symfony_behaviors behavior
        if ($callable = sfMixer::getCallable('BasePhoto:' . $name))
        {
          array_unshift($params, $this);
          return call_user_func_array($callable, $params);
        }


        return parent::__call($name, $params);
    }

}
