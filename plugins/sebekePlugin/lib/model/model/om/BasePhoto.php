<?php

/**
 * Base class that represents a row from the 'photo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Sep 29 17:08:36 2012
 *
 * @package    lib.model.om
 */
abstract class BasePhoto extends BaseObject  implements Persistent {


  const PEER = 'PhotoPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PhotoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the album_id field.
	 * @var        int
	 */
	protected $album_id;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the filename field.
	 * @var        string
	 */
	protected $filename;

	/**
	 * The value for the hits field.
	 * @var        int
	 */
	protected $hits;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the rating field.
	 * @var        int
	 */
	protected $rating;

	/**
	 * The value for the num_comment field.
	 * @var        int
	 */
	protected $num_comment;

	/**
	 * The value for the vote field.
	 * @var        int
	 */
	protected $vote;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the approved field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $approved;

	/**
	 * The value for the visibility field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $visibility;

	/**
	 * The value for the popular_photo field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $popular_photo;

	/**
	 * The value for the raw_ip field.
	 * @var        string
	 */
	protected $raw_ip;

	/**
	 * @var        Album
	 */
	protected $aAlbum;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUser;

	/**
	 * @var        array PhotoComment[] Collection to store aggregation of PhotoComment objects.
	 */
	protected $collPhotoComments;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPhotoComments.
	 */
	private $lastPhotoCommentCriteria = null;

	/**
	 * @var        array PhotoTag[] Collection to store aggregation of PhotoTag objects.
	 */
	protected $collPhotoTags;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPhotoTags.
	 */
	private $lastPhotoTagCriteria = null;

	/**
	 * @var        array PhotoFav[] Collection to store aggregation of PhotoFav objects.
	 */
	protected $collPhotoFavs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPhotoFavs.
	 */
	private $lastPhotoFavCriteria = null;

	/**
	 * @var        array PhotoVote[] Collection to store aggregation of PhotoVote objects.
	 */
	protected $collPhotoVotes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPhotoVotes.
	 */
	private $lastPhotoVoteCriteria = null;

	/**
	 * @var        array PhotoRate[] Collection to store aggregation of PhotoRate objects.
	 */
	protected $collPhotoRates;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPhotoRates.
	 */
	private $lastPhotoRateCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BasePhoto object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->approved = true;
		$this->visibility = 0;
		$this->popular_photo = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [album_id] column value.
	 * 
	 * @return     int
	 */
	public function getAlbumId()
	{
		return $this->album_id;
	}

	/**
	 * Get the [user_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [filename] column value.
	 * 
	 * @return     string
	 */
	public function getFilename()
	{
		return $this->filename;
	}

	/**
	 * Get the [hits] column value.
	 * 
	 * @return     int
	 */
	public function getHits()
	{
		return $this->hits;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [rating] column value.
	 * 
	 * @return     int
	 */
	public function getRating()
	{
		return $this->rating;
	}

	/**
	 * Get the [num_comment] column value.
	 * 
	 * @return     int
	 */
	public function getNumComment()
	{
		return $this->num_comment;
	}

	/**
	 * Get the [vote] column value.
	 * 
	 * @return     int
	 */
	public function getVote()
	{
		return $this->vote;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [approved] column value.
	 * 
	 * @return     boolean
	 */
	public function getApproved()
	{
		return $this->approved;
	}

	/**
	 * Get the [visibility] column value.
	 * 
	 * @return     int
	 */
	public function getVisibility()
	{
		return $this->visibility;
	}

	/**
	 * Get the [popular_photo] column value.
	 * 
	 * @return     boolean
	 */
	public function getPopularPhoto()
	{
		return $this->popular_photo;
	}

	/**
	 * Get the [raw_ip] column value.
	 * 
	 * @return     string
	 */
	public function getRawIp()
	{
		return $this->raw_ip;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PhotoPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [album_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setAlbumId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->album_id !== $v) {
			$this->album_id = $v;
			$this->modifiedColumns[] = PhotoPeer::ALBUM_ID;
		}

		if ($this->aAlbum !== null && $this->aAlbum->getId() !== $v) {
			$this->aAlbum = null;
		}

		return $this;
	} // setAlbumId()

	/**
	 * Set the value of [user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = PhotoPeer::USER_ID;
		}

		if ($this->asfGuardUser !== null && $this->asfGuardUser->getId() !== $v) {
			$this->asfGuardUser = null;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [filename] column.
	 * 
	 * @param      string $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setFilename($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->filename !== $v) {
			$this->filename = $v;
			$this->modifiedColumns[] = PhotoPeer::FILENAME;
		}

		return $this;
	} // setFilename()

	/**
	 * Set the value of [hits] column.
	 * 
	 * @param      int $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setHits($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->hits !== $v) {
			$this->hits = $v;
			$this->modifiedColumns[] = PhotoPeer::HITS;
		}

		return $this;
	} // setHits()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PhotoPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [rating] column.
	 * 
	 * @param      int $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setRating($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rating !== $v) {
			$this->rating = $v;
			$this->modifiedColumns[] = PhotoPeer::RATING;
		}

		return $this;
	} // setRating()

	/**
	 * Set the value of [num_comment] column.
	 * 
	 * @param      int $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setNumComment($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->num_comment !== $v) {
			$this->num_comment = $v;
			$this->modifiedColumns[] = PhotoPeer::NUM_COMMENT;
		}

		return $this;
	} // setNumComment()

	/**
	 * Set the value of [vote] column.
	 * 
	 * @param      int $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setVote($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->vote !== $v) {
			$this->vote = $v;
			$this->modifiedColumns[] = PhotoPeer::VOTE;
		}

		return $this;
	} // setVote()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = PhotoPeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [approved] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setApproved($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->approved !== $v || $v === true) {
			$this->approved = $v;
			$this->modifiedColumns[] = PhotoPeer::APPROVED;
		}

		return $this;
	} // setApproved()

	/**
	 * Set the value of [visibility] column.
	 * 
	 * @param      int $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setVisibility($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->visibility !== $v || $v === 0) {
			$this->visibility = $v;
			$this->modifiedColumns[] = PhotoPeer::VISIBILITY;
		}

		return $this;
	} // setVisibility()

	/**
	 * Set the value of [popular_photo] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setPopularPhoto($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->popular_photo !== $v || $v === false) {
			$this->popular_photo = $v;
			$this->modifiedColumns[] = PhotoPeer::POPULAR_PHOTO;
		}

		return $this;
	} // setPopularPhoto()

	/**
	 * Set the value of [raw_ip] column.
	 * 
	 * @param      string $v new value
	 * @return     Photo The current object (for fluent API support)
	 */
	public function setRawIp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->raw_ip !== $v) {
			$this->raw_ip = $v;
			$this->modifiedColumns[] = PhotoPeer::RAW_IP;
		}

		return $this;
	} // setRawIp()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(PhotoPeer::APPROVED,PhotoPeer::VISIBILITY,PhotoPeer::POPULAR_PHOTO))) {
				return false;
			}

			if ($this->approved !== true) {
				return false;
			}

			if ($this->visibility !== 0) {
				return false;
			}

			if ($this->popular_photo !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->album_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->user_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->filename = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->hits = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->created_at = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->rating = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->num_comment = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->vote = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->title = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->approved = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->visibility = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->popular_photo = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
			$this->raw_ip = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 14; // 14 = PhotoPeer::NUM_COLUMNS - PhotoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Photo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAlbum !== null && $this->album_id !== $this->aAlbum->getId()) {
			$this->aAlbum = null;
		}
		if ($this->asfGuardUser !== null && $this->user_id !== $this->asfGuardUser->getId()) {
			$this->asfGuardUser = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PhotoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PhotoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAlbum = null;
			$this->asfGuardUser = null;
			$this->collPhotoComments = null;
			$this->lastPhotoCommentCriteria = null;

			$this->collPhotoTags = null;
			$this->lastPhotoTagCriteria = null;

			$this->collPhotoFavs = null;
			$this->lastPhotoFavCriteria = null;

			$this->collPhotoVotes = null;
			$this->lastPhotoVoteCriteria = null;

			$this->collPhotoRates = null;
			$this->lastPhotoRateCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePhoto:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PhotoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			PhotoPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasePhoto:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePhoto:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(PhotoPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PhotoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasePhoto:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			PhotoPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlbum !== null) {
				if ($this->aAlbum->isModified() || $this->aAlbum->isNew()) {
					$affectedRows += $this->aAlbum->save($con);
				}
				$this->setAlbum($this->aAlbum);
			}

			if ($this->asfGuardUser !== null) {
				if ($this->asfGuardUser->isModified() || $this->asfGuardUser->isNew()) {
					$affectedRows += $this->asfGuardUser->save($con);
				}
				$this->setsfGuardUser($this->asfGuardUser);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PhotoPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PhotoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PhotoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collPhotoComments !== null) {
				foreach ($this->collPhotoComments as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPhotoTags !== null) {
				foreach ($this->collPhotoTags as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPhotoFavs !== null) {
				foreach ($this->collPhotoFavs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPhotoVotes !== null) {
				foreach ($this->collPhotoVotes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPhotoRates !== null) {
				foreach ($this->collPhotoRates as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAlbum !== null) {
				if (!$this->aAlbum->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAlbum->getValidationFailures());
				}
			}

			if ($this->asfGuardUser !== null) {
				if (!$this->asfGuardUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUser->getValidationFailures());
				}
			}


			if (($retval = PhotoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collPhotoComments !== null) {
					foreach ($this->collPhotoComments as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPhotoTags !== null) {
					foreach ($this->collPhotoTags as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPhotoFavs !== null) {
					foreach ($this->collPhotoFavs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPhotoVotes !== null) {
					foreach ($this->collPhotoVotes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPhotoRates !== null) {
					foreach ($this->collPhotoRates as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PhotoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getAlbumId();
				break;
			case 2:
				return $this->getUserId();
				break;
			case 3:
				return $this->getFilename();
				break;
			case 4:
				return $this->getHits();
				break;
			case 5:
				return $this->getCreatedAt();
				break;
			case 6:
				return $this->getRating();
				break;
			case 7:
				return $this->getNumComment();
				break;
			case 8:
				return $this->getVote();
				break;
			case 9:
				return $this->getTitle();
				break;
			case 10:
				return $this->getApproved();
				break;
			case 11:
				return $this->getVisibility();
				break;
			case 12:
				return $this->getPopularPhoto();
				break;
			case 13:
				return $this->getRawIp();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PhotoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getAlbumId(),
			$keys[2] => $this->getUserId(),
			$keys[3] => $this->getFilename(),
			$keys[4] => $this->getHits(),
			$keys[5] => $this->getCreatedAt(),
			$keys[6] => $this->getRating(),
			$keys[7] => $this->getNumComment(),
			$keys[8] => $this->getVote(),
			$keys[9] => $this->getTitle(),
			$keys[10] => $this->getApproved(),
			$keys[11] => $this->getVisibility(),
			$keys[12] => $this->getPopularPhoto(),
			$keys[13] => $this->getRawIp(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PhotoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setAlbumId($value);
				break;
			case 2:
				$this->setUserId($value);
				break;
			case 3:
				$this->setFilename($value);
				break;
			case 4:
				$this->setHits($value);
				break;
			case 5:
				$this->setCreatedAt($value);
				break;
			case 6:
				$this->setRating($value);
				break;
			case 7:
				$this->setNumComment($value);
				break;
			case 8:
				$this->setVote($value);
				break;
			case 9:
				$this->setTitle($value);
				break;
			case 10:
				$this->setApproved($value);
				break;
			case 11:
				$this->setVisibility($value);
				break;
			case 12:
				$this->setPopularPhoto($value);
				break;
			case 13:
				$this->setRawIp($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PhotoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAlbumId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setUserId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFilename($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setHits($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCreatedAt($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setRating($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setNumComment($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setVote($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTitle($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setApproved($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setVisibility($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPopularPhoto($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setRawIp($arr[$keys[13]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PhotoPeer::DATABASE_NAME);

		if ($this->isColumnModified(PhotoPeer::ID)) $criteria->add(PhotoPeer::ID, $this->id);
		if ($this->isColumnModified(PhotoPeer::ALBUM_ID)) $criteria->add(PhotoPeer::ALBUM_ID, $this->album_id);
		if ($this->isColumnModified(PhotoPeer::USER_ID)) $criteria->add(PhotoPeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(PhotoPeer::FILENAME)) $criteria->add(PhotoPeer::FILENAME, $this->filename);
		if ($this->isColumnModified(PhotoPeer::HITS)) $criteria->add(PhotoPeer::HITS, $this->hits);
		if ($this->isColumnModified(PhotoPeer::CREATED_AT)) $criteria->add(PhotoPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(PhotoPeer::RATING)) $criteria->add(PhotoPeer::RATING, $this->rating);
		if ($this->isColumnModified(PhotoPeer::NUM_COMMENT)) $criteria->add(PhotoPeer::NUM_COMMENT, $this->num_comment);
		if ($this->isColumnModified(PhotoPeer::VOTE)) $criteria->add(PhotoPeer::VOTE, $this->vote);
		if ($this->isColumnModified(PhotoPeer::TITLE)) $criteria->add(PhotoPeer::TITLE, $this->title);
		if ($this->isColumnModified(PhotoPeer::APPROVED)) $criteria->add(PhotoPeer::APPROVED, $this->approved);
		if ($this->isColumnModified(PhotoPeer::VISIBILITY)) $criteria->add(PhotoPeer::VISIBILITY, $this->visibility);
		if ($this->isColumnModified(PhotoPeer::POPULAR_PHOTO)) $criteria->add(PhotoPeer::POPULAR_PHOTO, $this->popular_photo);
		if ($this->isColumnModified(PhotoPeer::RAW_IP)) $criteria->add(PhotoPeer::RAW_IP, $this->raw_ip);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PhotoPeer::DATABASE_NAME);

		$criteria->add(PhotoPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Photo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAlbumId($this->album_id);

		$copyObj->setUserId($this->user_id);

		$copyObj->setFilename($this->filename);

		$copyObj->setHits($this->hits);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setRating($this->rating);

		$copyObj->setNumComment($this->num_comment);

		$copyObj->setVote($this->vote);

		$copyObj->setTitle($this->title);

		$copyObj->setApproved($this->approved);

		$copyObj->setVisibility($this->visibility);

		$copyObj->setPopularPhoto($this->popular_photo);

		$copyObj->setRawIp($this->raw_ip);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getPhotoComments() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPhotoComment($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPhotoTags() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPhotoTag($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPhotoFavs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPhotoFav($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPhotoVotes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPhotoVote($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPhotoRates() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPhotoRate($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Photo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PhotoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PhotoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Album object.
	 *
	 * @param      Album $v
	 * @return     Photo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAlbum(Album $v = null)
	{
		if ($v === null) {
			$this->setAlbumId(NULL);
		} else {
			$this->setAlbumId($v->getId());
		}

		$this->aAlbum = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Album object, it will not be re-added.
		if ($v !== null) {
			$v->addPhoto($this);
		}

		return $this;
	}


	/**
	 * Get the associated Album object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Album The associated Album object.
	 * @throws     PropelException
	 */
	public function getAlbum(PropelPDO $con = null)
	{
		if ($this->aAlbum === null && ($this->album_id !== null)) {
			$c = new Criteria(AlbumPeer::DATABASE_NAME);
			$c->add(AlbumPeer::ID, $this->album_id);
			$this->aAlbum = AlbumPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAlbum->addPhotos($this);
			 */
		}
		return $this->aAlbum;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     Photo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUser(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setUserId(NULL);
		} else {
			$this->setUserId($v->getId());
		}

		$this->asfGuardUser = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the sfGuardUser object, it will not be re-added.
		if ($v !== null) {
			$v->addPhoto($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUser(PropelPDO $con = null)
	{
		if ($this->asfGuardUser === null && ($this->user_id !== null)) {
			$c = new Criteria(sfGuardUserPeer::DATABASE_NAME);
			$c->add(sfGuardUserPeer::ID, $this->user_id);
			$this->asfGuardUser = sfGuardUserPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->asfGuardUser->addPhotos($this);
			 */
		}
		return $this->asfGuardUser;
	}

	/**
	 * Clears out the collPhotoComments collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPhotoComments()
	 */
	public function clearPhotoComments()
	{
		$this->collPhotoComments = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPhotoComments collection (array).
	 *
	 * By default this just sets the collPhotoComments collection to an empty array (like clearcollPhotoComments());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPhotoComments()
	{
		$this->collPhotoComments = array();
	}

	/**
	 * Gets an array of PhotoComment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Photo has previously been saved, it will retrieve
	 * related PhotoComments from storage. If this Photo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PhotoComment[]
	 * @throws     PropelException
	 */
	public function getPhotoComments($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoComments === null) {
			if ($this->isNew()) {
			   $this->collPhotoComments = array();
			} else {

				$criteria->add(PhotoCommentPeer::PHOTO_ID, $this->id);

				PhotoCommentPeer::addSelectColumns($criteria);
				$this->collPhotoComments = PhotoCommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PhotoCommentPeer::PHOTO_ID, $this->id);

				PhotoCommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastPhotoCommentCriteria) || !$this->lastPhotoCommentCriteria->equals($criteria)) {
					$this->collPhotoComments = PhotoCommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPhotoCommentCriteria = $criteria;
		return $this->collPhotoComments;
	}

	/**
	 * Returns the number of related PhotoComment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PhotoComment objects.
	 * @throws     PropelException
	 */
	public function countPhotoComments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPhotoComments === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PhotoCommentPeer::PHOTO_ID, $this->id);

				$count = PhotoCommentPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PhotoCommentPeer::PHOTO_ID, $this->id);

				if (!isset($this->lastPhotoCommentCriteria) || !$this->lastPhotoCommentCriteria->equals($criteria)) {
					$count = PhotoCommentPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPhotoComments);
				}
			} else {
				$count = count($this->collPhotoComments);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PhotoComment object to this object
	 * through the PhotoComment foreign key attribute.
	 *
	 * @param      PhotoComment $l PhotoComment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPhotoComment(PhotoComment $l)
	{
		if ($this->collPhotoComments === null) {
			$this->initPhotoComments();
		}
		if (!in_array($l, $this->collPhotoComments, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPhotoComments, $l);
			$l->setPhoto($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Photo is new, it will return
	 * an empty collection; or if this Photo has previously
	 * been saved, it will retrieve related PhotoComments from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Photo.
	 */
	public function getPhotoCommentsJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoComments === null) {
			if ($this->isNew()) {
				$this->collPhotoComments = array();
			} else {

				$criteria->add(PhotoCommentPeer::PHOTO_ID, $this->id);

				$this->collPhotoComments = PhotoCommentPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PhotoCommentPeer::PHOTO_ID, $this->id);

			if (!isset($this->lastPhotoCommentCriteria) || !$this->lastPhotoCommentCriteria->equals($criteria)) {
				$this->collPhotoComments = PhotoCommentPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastPhotoCommentCriteria = $criteria;

		return $this->collPhotoComments;
	}

	/**
	 * Clears out the collPhotoTags collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPhotoTags()
	 */
	public function clearPhotoTags()
	{
		$this->collPhotoTags = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPhotoTags collection (array).
	 *
	 * By default this just sets the collPhotoTags collection to an empty array (like clearcollPhotoTags());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPhotoTags()
	{
		$this->collPhotoTags = array();
	}

	/**
	 * Gets an array of PhotoTag objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Photo has previously been saved, it will retrieve
	 * related PhotoTags from storage. If this Photo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PhotoTag[]
	 * @throws     PropelException
	 */
	public function getPhotoTags($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoTags === null) {
			if ($this->isNew()) {
			   $this->collPhotoTags = array();
			} else {

				$criteria->add(PhotoTagPeer::PHOTO_ID, $this->id);

				PhotoTagPeer::addSelectColumns($criteria);
				$this->collPhotoTags = PhotoTagPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PhotoTagPeer::PHOTO_ID, $this->id);

				PhotoTagPeer::addSelectColumns($criteria);
				if (!isset($this->lastPhotoTagCriteria) || !$this->lastPhotoTagCriteria->equals($criteria)) {
					$this->collPhotoTags = PhotoTagPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPhotoTagCriteria = $criteria;
		return $this->collPhotoTags;
	}

	/**
	 * Returns the number of related PhotoTag objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PhotoTag objects.
	 * @throws     PropelException
	 */
	public function countPhotoTags(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPhotoTags === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PhotoTagPeer::PHOTO_ID, $this->id);

				$count = PhotoTagPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PhotoTagPeer::PHOTO_ID, $this->id);

				if (!isset($this->lastPhotoTagCriteria) || !$this->lastPhotoTagCriteria->equals($criteria)) {
					$count = PhotoTagPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPhotoTags);
				}
			} else {
				$count = count($this->collPhotoTags);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PhotoTag object to this object
	 * through the PhotoTag foreign key attribute.
	 *
	 * @param      PhotoTag $l PhotoTag
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPhotoTag(PhotoTag $l)
	{
		if ($this->collPhotoTags === null) {
			$this->initPhotoTags();
		}
		if (!in_array($l, $this->collPhotoTags, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPhotoTags, $l);
			$l->setPhoto($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Photo is new, it will return
	 * an empty collection; or if this Photo has previously
	 * been saved, it will retrieve related PhotoTags from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Photo.
	 */
	public function getPhotoTagsJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoTags === null) {
			if ($this->isNew()) {
				$this->collPhotoTags = array();
			} else {

				$criteria->add(PhotoTagPeer::PHOTO_ID, $this->id);

				$this->collPhotoTags = PhotoTagPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PhotoTagPeer::PHOTO_ID, $this->id);

			if (!isset($this->lastPhotoTagCriteria) || !$this->lastPhotoTagCriteria->equals($criteria)) {
				$this->collPhotoTags = PhotoTagPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastPhotoTagCriteria = $criteria;

		return $this->collPhotoTags;
	}

	/**
	 * Clears out the collPhotoFavs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPhotoFavs()
	 */
	public function clearPhotoFavs()
	{
		$this->collPhotoFavs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPhotoFavs collection (array).
	 *
	 * By default this just sets the collPhotoFavs collection to an empty array (like clearcollPhotoFavs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPhotoFavs()
	{
		$this->collPhotoFavs = array();
	}

	/**
	 * Gets an array of PhotoFav objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Photo has previously been saved, it will retrieve
	 * related PhotoFavs from storage. If this Photo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PhotoFav[]
	 * @throws     PropelException
	 */
	public function getPhotoFavs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoFavs === null) {
			if ($this->isNew()) {
			   $this->collPhotoFavs = array();
			} else {

				$criteria->add(PhotoFavPeer::PHOTO_ID, $this->id);

				PhotoFavPeer::addSelectColumns($criteria);
				$this->collPhotoFavs = PhotoFavPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PhotoFavPeer::PHOTO_ID, $this->id);

				PhotoFavPeer::addSelectColumns($criteria);
				if (!isset($this->lastPhotoFavCriteria) || !$this->lastPhotoFavCriteria->equals($criteria)) {
					$this->collPhotoFavs = PhotoFavPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPhotoFavCriteria = $criteria;
		return $this->collPhotoFavs;
	}

	/**
	 * Returns the number of related PhotoFav objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PhotoFav objects.
	 * @throws     PropelException
	 */
	public function countPhotoFavs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPhotoFavs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PhotoFavPeer::PHOTO_ID, $this->id);

				$count = PhotoFavPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PhotoFavPeer::PHOTO_ID, $this->id);

				if (!isset($this->lastPhotoFavCriteria) || !$this->lastPhotoFavCriteria->equals($criteria)) {
					$count = PhotoFavPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPhotoFavs);
				}
			} else {
				$count = count($this->collPhotoFavs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PhotoFav object to this object
	 * through the PhotoFav foreign key attribute.
	 *
	 * @param      PhotoFav $l PhotoFav
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPhotoFav(PhotoFav $l)
	{
		if ($this->collPhotoFavs === null) {
			$this->initPhotoFavs();
		}
		if (!in_array($l, $this->collPhotoFavs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPhotoFavs, $l);
			$l->setPhoto($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Photo is new, it will return
	 * an empty collection; or if this Photo has previously
	 * been saved, it will retrieve related PhotoFavs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Photo.
	 */
	public function getPhotoFavsJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoFavs === null) {
			if ($this->isNew()) {
				$this->collPhotoFavs = array();
			} else {

				$criteria->add(PhotoFavPeer::PHOTO_ID, $this->id);

				$this->collPhotoFavs = PhotoFavPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PhotoFavPeer::PHOTO_ID, $this->id);

			if (!isset($this->lastPhotoFavCriteria) || !$this->lastPhotoFavCriteria->equals($criteria)) {
				$this->collPhotoFavs = PhotoFavPeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastPhotoFavCriteria = $criteria;

		return $this->collPhotoFavs;
	}

	/**
	 * Clears out the collPhotoVotes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPhotoVotes()
	 */
	public function clearPhotoVotes()
	{
		$this->collPhotoVotes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPhotoVotes collection (array).
	 *
	 * By default this just sets the collPhotoVotes collection to an empty array (like clearcollPhotoVotes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPhotoVotes()
	{
		$this->collPhotoVotes = array();
	}

	/**
	 * Gets an array of PhotoVote objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Photo has previously been saved, it will retrieve
	 * related PhotoVotes from storage. If this Photo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PhotoVote[]
	 * @throws     PropelException
	 */
	public function getPhotoVotes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoVotes === null) {
			if ($this->isNew()) {
			   $this->collPhotoVotes = array();
			} else {

				$criteria->add(PhotoVotePeer::PHOTO_ID, $this->id);

				PhotoVotePeer::addSelectColumns($criteria);
				$this->collPhotoVotes = PhotoVotePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PhotoVotePeer::PHOTO_ID, $this->id);

				PhotoVotePeer::addSelectColumns($criteria);
				if (!isset($this->lastPhotoVoteCriteria) || !$this->lastPhotoVoteCriteria->equals($criteria)) {
					$this->collPhotoVotes = PhotoVotePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPhotoVoteCriteria = $criteria;
		return $this->collPhotoVotes;
	}

	/**
	 * Returns the number of related PhotoVote objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PhotoVote objects.
	 * @throws     PropelException
	 */
	public function countPhotoVotes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPhotoVotes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PhotoVotePeer::PHOTO_ID, $this->id);

				$count = PhotoVotePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PhotoVotePeer::PHOTO_ID, $this->id);

				if (!isset($this->lastPhotoVoteCriteria) || !$this->lastPhotoVoteCriteria->equals($criteria)) {
					$count = PhotoVotePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPhotoVotes);
				}
			} else {
				$count = count($this->collPhotoVotes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PhotoVote object to this object
	 * through the PhotoVote foreign key attribute.
	 *
	 * @param      PhotoVote $l PhotoVote
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPhotoVote(PhotoVote $l)
	{
		if ($this->collPhotoVotes === null) {
			$this->initPhotoVotes();
		}
		if (!in_array($l, $this->collPhotoVotes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPhotoVotes, $l);
			$l->setPhoto($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Photo is new, it will return
	 * an empty collection; or if this Photo has previously
	 * been saved, it will retrieve related PhotoVotes from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Photo.
	 */
	public function getPhotoVotesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoVotes === null) {
			if ($this->isNew()) {
				$this->collPhotoVotes = array();
			} else {

				$criteria->add(PhotoVotePeer::PHOTO_ID, $this->id);

				$this->collPhotoVotes = PhotoVotePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PhotoVotePeer::PHOTO_ID, $this->id);

			if (!isset($this->lastPhotoVoteCriteria) || !$this->lastPhotoVoteCriteria->equals($criteria)) {
				$this->collPhotoVotes = PhotoVotePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastPhotoVoteCriteria = $criteria;

		return $this->collPhotoVotes;
	}

	/**
	 * Clears out the collPhotoRates collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPhotoRates()
	 */
	public function clearPhotoRates()
	{
		$this->collPhotoRates = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPhotoRates collection (array).
	 *
	 * By default this just sets the collPhotoRates collection to an empty array (like clearcollPhotoRates());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPhotoRates()
	{
		$this->collPhotoRates = array();
	}

	/**
	 * Gets an array of PhotoRate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Photo has previously been saved, it will retrieve
	 * related PhotoRates from storage. If this Photo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PhotoRate[]
	 * @throws     PropelException
	 */
	public function getPhotoRates($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoRates === null) {
			if ($this->isNew()) {
			   $this->collPhotoRates = array();
			} else {

				$criteria->add(PhotoRatePeer::PHOTO_ID, $this->id);

				PhotoRatePeer::addSelectColumns($criteria);
				$this->collPhotoRates = PhotoRatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PhotoRatePeer::PHOTO_ID, $this->id);

				PhotoRatePeer::addSelectColumns($criteria);
				if (!isset($this->lastPhotoRateCriteria) || !$this->lastPhotoRateCriteria->equals($criteria)) {
					$this->collPhotoRates = PhotoRatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPhotoRateCriteria = $criteria;
		return $this->collPhotoRates;
	}

	/**
	 * Returns the number of related PhotoRate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PhotoRate objects.
	 * @throws     PropelException
	 */
	public function countPhotoRates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPhotoRates === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PhotoRatePeer::PHOTO_ID, $this->id);

				$count = PhotoRatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PhotoRatePeer::PHOTO_ID, $this->id);

				if (!isset($this->lastPhotoRateCriteria) || !$this->lastPhotoRateCriteria->equals($criteria)) {
					$count = PhotoRatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPhotoRates);
				}
			} else {
				$count = count($this->collPhotoRates);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PhotoRate object to this object
	 * through the PhotoRate foreign key attribute.
	 *
	 * @param      PhotoRate $l PhotoRate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPhotoRate(PhotoRate $l)
	{
		if ($this->collPhotoRates === null) {
			$this->initPhotoRates();
		}
		if (!in_array($l, $this->collPhotoRates, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPhotoRates, $l);
			$l->setPhoto($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Photo is new, it will return
	 * an empty collection; or if this Photo has previously
	 * been saved, it will retrieve related PhotoRates from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Photo.
	 */
	public function getPhotoRatesJoinsfGuardUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PhotoPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPhotoRates === null) {
			if ($this->isNew()) {
				$this->collPhotoRates = array();
			} else {

				$criteria->add(PhotoRatePeer::PHOTO_ID, $this->id);

				$this->collPhotoRates = PhotoRatePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PhotoRatePeer::PHOTO_ID, $this->id);

			if (!isset($this->lastPhotoRateCriteria) || !$this->lastPhotoRateCriteria->equals($criteria)) {
				$this->collPhotoRates = PhotoRatePeer::doSelectJoinsfGuardUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastPhotoRateCriteria = $criteria;

		return $this->collPhotoRates;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collPhotoComments) {
				foreach ((array) $this->collPhotoComments as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPhotoTags) {
				foreach ((array) $this->collPhotoTags as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPhotoFavs) {
				foreach ((array) $this->collPhotoFavs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPhotoVotes) {
				foreach ((array) $this->collPhotoVotes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPhotoRates) {
				foreach ((array) $this->collPhotoRates as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collPhotoComments = null;
		$this->collPhotoTags = null;
		$this->collPhotoFavs = null;
		$this->collPhotoVotes = null;
		$this->collPhotoRates = null;
			$this->aAlbum = null;
			$this->asfGuardUser = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasePhoto:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasePhoto::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasePhoto
