<?php


/**
 * Base class that represents a query for the 'keyphrase' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 05:18:51 2015
 *
 * @method KeyphraseQuery orderById($order = Criteria::ASC) Order by the id column
 * @method KeyphraseQuery orderByKeyphrase($order = Criteria::ASC) Order by the keyphrase column
 * @method KeyphraseQuery orderByCount($order = Criteria::ASC) Order by the count column
 * @method KeyphraseQuery orderByActive($order = Criteria::ASC) Order by the active column
 * @method KeyphraseQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 *
 * @method KeyphraseQuery groupById() Group by the id column
 * @method KeyphraseQuery groupByKeyphrase() Group by the keyphrase column
 * @method KeyphraseQuery groupByCount() Group by the count column
 * @method KeyphraseQuery groupByActive() Group by the active column
 * @method KeyphraseQuery groupByCreatedAt() Group by the created_at column
 *
 * @method KeyphraseQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method KeyphraseQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method KeyphraseQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method Keyphrase findOne(PropelPDO $con = null) Return the first Keyphrase matching the query
 * @method Keyphrase findOneOrCreate(PropelPDO $con = null) Return the first Keyphrase matching the query, or a new Keyphrase object populated from the query conditions when no match is found
 *
 * @method Keyphrase findOneById(int $id) Return the first Keyphrase filtered by the id column
 * @method Keyphrase findOneByKeyphrase(string $keyphrase) Return the first Keyphrase filtered by the keyphrase column
 * @method Keyphrase findOneByCount(int $count) Return the first Keyphrase filtered by the count column
 * @method Keyphrase findOneByActive(boolean $active) Return the first Keyphrase filtered by the active column
 * @method Keyphrase findOneByCreatedAt(string $created_at) Return the first Keyphrase filtered by the created_at column
 *
 * @method array findById(int $id) Return Keyphrase objects filtered by the id column
 * @method array findByKeyphrase(string $keyphrase) Return Keyphrase objects filtered by the keyphrase column
 * @method array findByCount(int $count) Return Keyphrase objects filtered by the count column
 * @method array findByActive(boolean $active) Return Keyphrase objects filtered by the active column
 * @method array findByCreatedAt(string $created_at) Return Keyphrase objects filtered by the created_at column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseKeyphraseQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseKeyphraseQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Keyphrase', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new KeyphraseQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     KeyphraseQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return KeyphraseQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof KeyphraseQuery) {
            return $criteria;
        }
        $query = new KeyphraseQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Keyphrase|Keyphrase[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = KeyphrasePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(KeyphrasePeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Keyphrase A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `KEYPHRASE`, `COUNT`, `ACTIVE`, `CREATED_AT` FROM `keyphrase` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Keyphrase();
            $obj->hydrate($row);
            KeyphrasePeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Keyphrase|Keyphrase[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Keyphrase[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return KeyphraseQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(KeyphrasePeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return KeyphraseQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(KeyphrasePeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return KeyphraseQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(KeyphrasePeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the keyphrase column
     *
     * Example usage:
     * <code>
     * $query->filterByKeyphrase('fooValue');   // WHERE keyphrase = 'fooValue'
     * $query->filterByKeyphrase('%fooValue%'); // WHERE keyphrase LIKE '%fooValue%'
     * </code>
     *
     * @param     string $keyphrase The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return KeyphraseQuery The current query, for fluid interface
     */
    public function filterByKeyphrase($keyphrase = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($keyphrase)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $keyphrase)) {
                $keyphrase = str_replace('*', '%', $keyphrase);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(KeyphrasePeer::KEYPHRASE, $keyphrase, $comparison);
    }

    /**
     * Filter the query on the count column
     *
     * Example usage:
     * <code>
     * $query->filterByCount(1234); // WHERE count = 1234
     * $query->filterByCount(array(12, 34)); // WHERE count IN (12, 34)
     * $query->filterByCount(array('min' => 12)); // WHERE count > 12
     * </code>
     *
     * @param     mixed $count The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return KeyphraseQuery The current query, for fluid interface
     */
    public function filterByCount($count = null, $comparison = null)
    {
        if (is_array($count)) {
            $useMinMax = false;
            if (isset($count['min'])) {
                $this->addUsingAlias(KeyphrasePeer::COUNT, $count['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($count['max'])) {
                $this->addUsingAlias(KeyphrasePeer::COUNT, $count['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(KeyphrasePeer::COUNT, $count, $comparison);
    }

    /**
     * Filter the query on the active column
     *
     * Example usage:
     * <code>
     * $query->filterByActive(true); // WHERE active = true
     * $query->filterByActive('yes'); // WHERE active = true
     * </code>
     *
     * @param     boolean|string $active The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return KeyphraseQuery The current query, for fluid interface
     */
    public function filterByActive($active = null, $comparison = null)
    {
        if (is_string($active)) {
            $active = in_array(strtolower($active), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(KeyphrasePeer::ACTIVE, $active, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return KeyphraseQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(KeyphrasePeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(KeyphrasePeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(KeyphrasePeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Exclude object from result
     *
     * @param   Keyphrase $keyphrase Object to remove from the list of results
     *
     * @return KeyphraseQuery The current query, for fluid interface
     */
    public function prune($keyphrase = null)
    {
        if ($keyphrase) {
            $this->addUsingAlias(KeyphrasePeer::ID, $keyphrase->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
