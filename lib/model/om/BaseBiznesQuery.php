<?php


/**
 * Base class that represents a query for the 'biznes' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Fri Jan  9 05:18:51 2015
 *
 * @method BiznesQuery orderById($order = Criteria::ASC) Order by the id column
 * @method BiznesQuery orderByTitle($order = Criteria::ASC) Order by the title column
 * @method BiznesQuery orderByAddress($order = Criteria::ASC) Order by the address column
 * @method BiznesQuery orderByPhone($order = Criteria::ASC) Order by the phone column
 * @method BiznesQuery orderByWebsite($order = Criteria::ASC) Order by the website column
 * @method BiznesQuery orderByCategory($order = Criteria::ASC) Order by the category column
 * @method BiznesQuery orderByPhoto($order = Criteria::ASC) Order by the photo column
 * @method BiznesQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method BiznesQuery orderByRating($order = Criteria::ASC) Order by the rating column
 * @method BiznesQuery orderByNumComment($order = Criteria::ASC) Order by the num_comment column
 * @method BiznesQuery orderByApproved($order = Criteria::ASC) Order by the approved column
 * @method BiznesQuery orderByUserId($order = Criteria::ASC) Order by the user_id column
 *
 * @method BiznesQuery groupById() Group by the id column
 * @method BiznesQuery groupByTitle() Group by the title column
 * @method BiznesQuery groupByAddress() Group by the address column
 * @method BiznesQuery groupByPhone() Group by the phone column
 * @method BiznesQuery groupByWebsite() Group by the website column
 * @method BiznesQuery groupByCategory() Group by the category column
 * @method BiznesQuery groupByPhoto() Group by the photo column
 * @method BiznesQuery groupByCreatedAt() Group by the created_at column
 * @method BiznesQuery groupByRating() Group by the rating column
 * @method BiznesQuery groupByNumComment() Group by the num_comment column
 * @method BiznesQuery groupByApproved() Group by the approved column
 * @method BiznesQuery groupByUserId() Group by the user_id column
 *
 * @method BiznesQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method BiznesQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method BiznesQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method BiznesQuery leftJoinsfGuardUser($relationAlias = null) Adds a LEFT JOIN clause to the query using the sfGuardUser relation
 * @method BiznesQuery rightJoinsfGuardUser($relationAlias = null) Adds a RIGHT JOIN clause to the query using the sfGuardUser relation
 * @method BiznesQuery innerJoinsfGuardUser($relationAlias = null) Adds a INNER JOIN clause to the query using the sfGuardUser relation
 *
 * @method BiznesQuery leftJoinBiznesComment($relationAlias = null) Adds a LEFT JOIN clause to the query using the BiznesComment relation
 * @method BiznesQuery rightJoinBiznesComment($relationAlias = null) Adds a RIGHT JOIN clause to the query using the BiznesComment relation
 * @method BiznesQuery innerJoinBiznesComment($relationAlias = null) Adds a INNER JOIN clause to the query using the BiznesComment relation
 *
 * @method BiznesQuery leftJoinBiznesTag($relationAlias = null) Adds a LEFT JOIN clause to the query using the BiznesTag relation
 * @method BiznesQuery rightJoinBiznesTag($relationAlias = null) Adds a RIGHT JOIN clause to the query using the BiznesTag relation
 * @method BiznesQuery innerJoinBiznesTag($relationAlias = null) Adds a INNER JOIN clause to the query using the BiznesTag relation
 *
 * @method BiznesQuery leftJoinBiznesFav($relationAlias = null) Adds a LEFT JOIN clause to the query using the BiznesFav relation
 * @method BiznesQuery rightJoinBiznesFav($relationAlias = null) Adds a RIGHT JOIN clause to the query using the BiznesFav relation
 * @method BiznesQuery innerJoinBiznesFav($relationAlias = null) Adds a INNER JOIN clause to the query using the BiznesFav relation
 *
 * @method BiznesQuery leftJoinBiznesRate($relationAlias = null) Adds a LEFT JOIN clause to the query using the BiznesRate relation
 * @method BiznesQuery rightJoinBiznesRate($relationAlias = null) Adds a RIGHT JOIN clause to the query using the BiznesRate relation
 * @method BiznesQuery innerJoinBiznesRate($relationAlias = null) Adds a INNER JOIN clause to the query using the BiznesRate relation
 *
 * @method Biznes findOne(PropelPDO $con = null) Return the first Biznes matching the query
 * @method Biznes findOneOrCreate(PropelPDO $con = null) Return the first Biznes matching the query, or a new Biznes object populated from the query conditions when no match is found
 *
 * @method Biznes findOneById(int $id) Return the first Biznes filtered by the id column
 * @method Biznes findOneByTitle(string $title) Return the first Biznes filtered by the title column
 * @method Biznes findOneByAddress(string $address) Return the first Biznes filtered by the address column
 * @method Biznes findOneByPhone(string $phone) Return the first Biznes filtered by the phone column
 * @method Biznes findOneByWebsite(string $website) Return the first Biznes filtered by the website column
 * @method Biznes findOneByCategory(string $category) Return the first Biznes filtered by the category column
 * @method Biznes findOneByPhoto(string $photo) Return the first Biznes filtered by the photo column
 * @method Biznes findOneByCreatedAt(string $created_at) Return the first Biznes filtered by the created_at column
 * @method Biznes findOneByRating(int $rating) Return the first Biznes filtered by the rating column
 * @method Biznes findOneByNumComment(int $num_comment) Return the first Biznes filtered by the num_comment column
 * @method Biznes findOneByApproved(boolean $approved) Return the first Biznes filtered by the approved column
 * @method Biznes findOneByUserId(int $user_id) Return the first Biznes filtered by the user_id column
 *
 * @method array findById(int $id) Return Biznes objects filtered by the id column
 * @method array findByTitle(string $title) Return Biznes objects filtered by the title column
 * @method array findByAddress(string $address) Return Biznes objects filtered by the address column
 * @method array findByPhone(string $phone) Return Biznes objects filtered by the phone column
 * @method array findByWebsite(string $website) Return Biznes objects filtered by the website column
 * @method array findByCategory(string $category) Return Biznes objects filtered by the category column
 * @method array findByPhoto(string $photo) Return Biznes objects filtered by the photo column
 * @method array findByCreatedAt(string $created_at) Return Biznes objects filtered by the created_at column
 * @method array findByRating(int $rating) Return Biznes objects filtered by the rating column
 * @method array findByNumComment(int $num_comment) Return Biznes objects filtered by the num_comment column
 * @method array findByApproved(boolean $approved) Return Biznes objects filtered by the approved column
 * @method array findByUserId(int $user_id) Return Biznes objects filtered by the user_id column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseBiznesQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseBiznesQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Biznes', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new BiznesQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     BiznesQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return BiznesQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof BiznesQuery) {
            return $criteria;
        }
        $query = new BiznesQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Biznes|Biznes[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = BiznesPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(BiznesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Biznes A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `TITLE`, `ADDRESS`, `PHONE`, `WEBSITE`, `CATEGORY`, `PHOTO`, `CREATED_AT`, `RATING`, `NUM_COMMENT`, `APPROVED`, `USER_ID` FROM `biznes` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Biznes();
            $obj->hydrate($row);
            BiznesPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Biznes|Biznes[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Biznes[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(BiznesPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(BiznesPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(BiznesPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the title column
     *
     * Example usage:
     * <code>
     * $query->filterByTitle('fooValue');   // WHERE title = 'fooValue'
     * $query->filterByTitle('%fooValue%'); // WHERE title LIKE '%fooValue%'
     * </code>
     *
     * @param     string $title The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByTitle($title = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($title)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $title)) {
                $title = str_replace('*', '%', $title);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BiznesPeer::TITLE, $title, $comparison);
    }

    /**
     * Filter the query on the address column
     *
     * Example usage:
     * <code>
     * $query->filterByAddress('fooValue');   // WHERE address = 'fooValue'
     * $query->filterByAddress('%fooValue%'); // WHERE address LIKE '%fooValue%'
     * </code>
     *
     * @param     string $address The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByAddress($address = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($address)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $address)) {
                $address = str_replace('*', '%', $address);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BiznesPeer::ADDRESS, $address, $comparison);
    }

    /**
     * Filter the query on the phone column
     *
     * Example usage:
     * <code>
     * $query->filterByPhone('fooValue');   // WHERE phone = 'fooValue'
     * $query->filterByPhone('%fooValue%'); // WHERE phone LIKE '%fooValue%'
     * </code>
     *
     * @param     string $phone The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByPhone($phone = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($phone)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $phone)) {
                $phone = str_replace('*', '%', $phone);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BiznesPeer::PHONE, $phone, $comparison);
    }

    /**
     * Filter the query on the website column
     *
     * Example usage:
     * <code>
     * $query->filterByWebsite('fooValue');   // WHERE website = 'fooValue'
     * $query->filterByWebsite('%fooValue%'); // WHERE website LIKE '%fooValue%'
     * </code>
     *
     * @param     string $website The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByWebsite($website = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($website)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $website)) {
                $website = str_replace('*', '%', $website);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BiznesPeer::WEBSITE, $website, $comparison);
    }

    /**
     * Filter the query on the category column
     *
     * Example usage:
     * <code>
     * $query->filterByCategory('fooValue');   // WHERE category = 'fooValue'
     * $query->filterByCategory('%fooValue%'); // WHERE category LIKE '%fooValue%'
     * </code>
     *
     * @param     string $category The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByCategory($category = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($category)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $category)) {
                $category = str_replace('*', '%', $category);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BiznesPeer::CATEGORY, $category, $comparison);
    }

    /**
     * Filter the query on the photo column
     *
     * Example usage:
     * <code>
     * $query->filterByPhoto('fooValue');   // WHERE photo = 'fooValue'
     * $query->filterByPhoto('%fooValue%'); // WHERE photo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $photo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByPhoto($photo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($photo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $photo)) {
                $photo = str_replace('*', '%', $photo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(BiznesPeer::PHOTO, $photo, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(BiznesPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(BiznesPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BiznesPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the rating column
     *
     * Example usage:
     * <code>
     * $query->filterByRating(1234); // WHERE rating = 1234
     * $query->filterByRating(array(12, 34)); // WHERE rating IN (12, 34)
     * $query->filterByRating(array('min' => 12)); // WHERE rating > 12
     * </code>
     *
     * @param     mixed $rating The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByRating($rating = null, $comparison = null)
    {
        if (is_array($rating)) {
            $useMinMax = false;
            if (isset($rating['min'])) {
                $this->addUsingAlias(BiznesPeer::RATING, $rating['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($rating['max'])) {
                $this->addUsingAlias(BiznesPeer::RATING, $rating['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BiznesPeer::RATING, $rating, $comparison);
    }

    /**
     * Filter the query on the num_comment column
     *
     * Example usage:
     * <code>
     * $query->filterByNumComment(1234); // WHERE num_comment = 1234
     * $query->filterByNumComment(array(12, 34)); // WHERE num_comment IN (12, 34)
     * $query->filterByNumComment(array('min' => 12)); // WHERE num_comment > 12
     * </code>
     *
     * @param     mixed $numComment The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByNumComment($numComment = null, $comparison = null)
    {
        if (is_array($numComment)) {
            $useMinMax = false;
            if (isset($numComment['min'])) {
                $this->addUsingAlias(BiznesPeer::NUM_COMMENT, $numComment['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($numComment['max'])) {
                $this->addUsingAlias(BiznesPeer::NUM_COMMENT, $numComment['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BiznesPeer::NUM_COMMENT, $numComment, $comparison);
    }

    /**
     * Filter the query on the approved column
     *
     * Example usage:
     * <code>
     * $query->filterByApproved(true); // WHERE approved = true
     * $query->filterByApproved('yes'); // WHERE approved = true
     * </code>
     *
     * @param     boolean|string $approved The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByApproved($approved = null, $comparison = null)
    {
        if (is_string($approved)) {
            $approved = in_array(strtolower($approved), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(BiznesPeer::APPROVED, $approved, $comparison);
    }

    /**
     * Filter the query on the user_id column
     *
     * Example usage:
     * <code>
     * $query->filterByUserId(1234); // WHERE user_id = 1234
     * $query->filterByUserId(array(12, 34)); // WHERE user_id IN (12, 34)
     * $query->filterByUserId(array('min' => 12)); // WHERE user_id > 12
     * </code>
     *
     * @see       filterBysfGuardUser()
     *
     * @param     mixed $userId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function filterByUserId($userId = null, $comparison = null)
    {
        if (is_array($userId)) {
            $useMinMax = false;
            if (isset($userId['min'])) {
                $this->addUsingAlias(BiznesPeer::USER_ID, $userId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($userId['max'])) {
                $this->addUsingAlias(BiznesPeer::USER_ID, $userId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(BiznesPeer::USER_ID, $userId, $comparison);
    }

    /**
     * Filter the query by a related sfGuardUser object
     *
     * @param   sfGuardUser|PropelObjectCollection $sfGuardUser The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BiznesQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterBysfGuardUser($sfGuardUser, $comparison = null)
    {
        if ($sfGuardUser instanceof sfGuardUser) {
            return $this
                ->addUsingAlias(BiznesPeer::USER_ID, $sfGuardUser->getId(), $comparison);
        } elseif ($sfGuardUser instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(BiznesPeer::USER_ID, $sfGuardUser->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterBysfGuardUser() only accepts arguments of type sfGuardUser or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the sfGuardUser relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function joinsfGuardUser($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('sfGuardUser');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'sfGuardUser');
        }

        return $this;
    }

    /**
     * Use the sfGuardUser relation sfGuardUser object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   sfGuardUserQuery A secondary query class using the current class as primary query
     */
    public function usesfGuardUserQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinsfGuardUser($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'sfGuardUser', 'sfGuardUserQuery');
    }

    /**
     * Filter the query by a related BiznesComment object
     *
     * @param   BiznesComment|PropelObjectCollection $biznesComment  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BiznesQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByBiznesComment($biznesComment, $comparison = null)
    {
        if ($biznesComment instanceof BiznesComment) {
            return $this
                ->addUsingAlias(BiznesPeer::ID, $biznesComment->getBiznesId(), $comparison);
        } elseif ($biznesComment instanceof PropelObjectCollection) {
            return $this
                ->useBiznesCommentQuery()
                ->filterByPrimaryKeys($biznesComment->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByBiznesComment() only accepts arguments of type BiznesComment or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the BiznesComment relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function joinBiznesComment($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('BiznesComment');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'BiznesComment');
        }

        return $this;
    }

    /**
     * Use the BiznesComment relation BiznesComment object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   BiznesCommentQuery A secondary query class using the current class as primary query
     */
    public function useBiznesCommentQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinBiznesComment($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'BiznesComment', 'BiznesCommentQuery');
    }

    /**
     * Filter the query by a related BiznesTag object
     *
     * @param   BiznesTag|PropelObjectCollection $biznesTag  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BiznesQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByBiznesTag($biznesTag, $comparison = null)
    {
        if ($biznesTag instanceof BiznesTag) {
            return $this
                ->addUsingAlias(BiznesPeer::ID, $biznesTag->getBiznesId(), $comparison);
        } elseif ($biznesTag instanceof PropelObjectCollection) {
            return $this
                ->useBiznesTagQuery()
                ->filterByPrimaryKeys($biznesTag->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByBiznesTag() only accepts arguments of type BiznesTag or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the BiznesTag relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function joinBiznesTag($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('BiznesTag');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'BiznesTag');
        }

        return $this;
    }

    /**
     * Use the BiznesTag relation BiznesTag object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   BiznesTagQuery A secondary query class using the current class as primary query
     */
    public function useBiznesTagQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinBiznesTag($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'BiznesTag', 'BiznesTagQuery');
    }

    /**
     * Filter the query by a related BiznesFav object
     *
     * @param   BiznesFav|PropelObjectCollection $biznesFav  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BiznesQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByBiznesFav($biznesFav, $comparison = null)
    {
        if ($biznesFav instanceof BiznesFav) {
            return $this
                ->addUsingAlias(BiznesPeer::ID, $biznesFav->getBiznesId(), $comparison);
        } elseif ($biznesFav instanceof PropelObjectCollection) {
            return $this
                ->useBiznesFavQuery()
                ->filterByPrimaryKeys($biznesFav->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByBiznesFav() only accepts arguments of type BiznesFav or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the BiznesFav relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function joinBiznesFav($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('BiznesFav');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'BiznesFav');
        }

        return $this;
    }

    /**
     * Use the BiznesFav relation BiznesFav object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   BiznesFavQuery A secondary query class using the current class as primary query
     */
    public function useBiznesFavQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinBiznesFav($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'BiznesFav', 'BiznesFavQuery');
    }

    /**
     * Filter the query by a related BiznesRate object
     *
     * @param   BiznesRate|PropelObjectCollection $biznesRate  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   BiznesQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByBiznesRate($biznesRate, $comparison = null)
    {
        if ($biznesRate instanceof BiznesRate) {
            return $this
                ->addUsingAlias(BiznesPeer::ID, $biznesRate->getBiznesId(), $comparison);
        } elseif ($biznesRate instanceof PropelObjectCollection) {
            return $this
                ->useBiznesRateQuery()
                ->filterByPrimaryKeys($biznesRate->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByBiznesRate() only accepts arguments of type BiznesRate or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the BiznesRate relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function joinBiznesRate($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('BiznesRate');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'BiznesRate');
        }

        return $this;
    }

    /**
     * Use the BiznesRate relation BiznesRate object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   BiznesRateQuery A secondary query class using the current class as primary query
     */
    public function useBiznesRateQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinBiznesRate($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'BiznesRate', 'BiznesRateQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Biznes $biznes Object to remove from the list of results
     *
     * @return BiznesQuery The current query, for fluid interface
     */
    public function prune($biznes = null)
    {
        if ($biznes) {
            $this->addUsingAlias(BiznesPeer::ID, $biznes->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
